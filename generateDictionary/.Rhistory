dataInput = list(timeIntensityData=(data.frame(hpi,GFP)))
dataInput$timeIntensityData$GFP
is.data.frame(dataInput$timeIntensityData)
data_next_check=dataInput$timeIntensityData
"hpi" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFL" %in% names(data_next_check)
is.numeric(data_next_check$hpi)
is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP)
dataCheck <-function(data){
isalist=is.list(data)
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
is.list(dataInput)
is.data.frame(dataInput)
list(data=dataInput,b=3)
p<-list(data=dataInput,b=3)
is.list(p)
is.data.frame(p)
dataCheck <-function(data){
isalist=(is.list(data) & !is.data.frame(data))
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
View(data_next_check)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput$dataScalingParameters$timeMin+
dataOutput$dataScalingParameters$timeRatio*dataOutput$timeIntensityData$hpi
GFP=dataOutput$dataScalingParameters$intensityMin+
dataOutput$dataScalingParameters$intensityRatio*dataOutput$timeIntensityData$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = dataCheck(dataInput2)
dataOutput2
sd(c(3,5))
170*105/151
require("sicegar")
detach(sicegar)
detach("sicegar")
load("~/GitHub/single_cell_virology/processedData/SCV045_filter00_combinedResults.Rda")
View(all_fPc_SCV045_filter00)
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
t(all_fPc_SCV045_filter00[7,])
t(all_fPc_SCV045_filter00[12,])
rep(1:4, 2)
rep("a", 2)
rep(c("a","b"), 2)
rep(c("a","b"), 2,4)
rep(c("a","b"), c(2,4))
rep(c("a","b","c"), c(2,4,6))
FDR?
?
`
""
ELKFWE
QUIR
S
msdnbf
)))
install.packages("ada", "caret", "e1071", "ggplot2", "GGally", "glmnet", "MASS", "randomForest", "reshape2", "sparsediscrim")
install.packages("ada")
install.packages("caret")
install.packages("e1071")
install.packages("ggplot2")
install.packages("GGally")
install.packages("glmnet")
install.packages("MASS")
install.packages("randomForest")
install.packages("reshape2")
install.packages("sparsediscrim")
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
??foreach
install.packages("doMC")
install.packages("foreach")
??foreach
require(doMC)
require(foreach)
??foreach
?foreach
source('~/Desktop/statTest.R', echo=TRUE)
mean(trueSet)
mean(wrongSet)
length(trueSet)
length(wrongSet)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
sprintf("%E", pi)
sprintf("%3E", pi)
sprintf("%.3E", pi)
sprintf("%.3E", 9837649872345095486)
sprintf("%.3e", 9837649872345095486)
sprintf("%.3e", .000000009837649872345095486)
sprintf("%.3E", .000000009837649872345095486)
# Initial Command to Reset the System
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
load("/Users/umut/GitHub/single_cell_virology/processedData/SCV047_mod05filter00_Max1000Min40.Rda")
View(fP_SCV047_mod05filter00_Max1000Min40)
require("RDAVIDWebService")
install.packages("rJava")
require("RDAVIDWebService")
require("rJava")
require("RDAVIDWebService")
require("RDAVIDWebService")
expand.grid(c(1,2),c(3,4))
expand.grid(c(1,2),c(3,4))
as.data.frame(letters=c("a","a","b","b","b","b"),=numbers=c(1,2,1,2,3,4))
data.frame(letters=c("a","a","b","b","b","b"),=numbers=c(1,2,1,2,3,4))
data.frame(letters=c("a","a","b","b","b","b"),numbers=c(1,2,1,2,3,4))
q<-data.frame(letters=c("a","a","b","b","b","b"),numbers=c(1,2,1,2,3,4))
q
q %>% dplyr::group_by(letters) %>% dplyr::mutate(numbers2=numbers)
q %>% dplyr::group_by(letters) %>% dplyr::mutate(numbers2=numbers)->q
require("dplyr")
q %>% dplyr::group_by(letters) %>% dplyr::mutate(numbers2=numbers)->q
q
q %>% dplyr::summerize(numcomb=expand.grid(numbers,numbers2))
q %>% dplyr::summarise(numcomb=expand.grid(numbers,numbers2))
q %>% dplyr::do(numcomb=expand.grid(numbers,numbers2))
q %>% dplyr::mutate(numcomb=expand.grid(numbers,numbers2))
q %>% dplyr::do(numcomb=expand.grid(numbers,numbers2))
q
q %>% dplyr::do(numcomb=expand.grid(q$numbers,q$numbers2))
q %>% dplyr::group_by(letters)%>%dplyr::do(numcomb=expand.grid(q$numbers,q$numbers2))
q %>% dplyr::group_by(letters)%>%dplyr::do(numcomb=expand.grid(q$numbers,q$numbers2))->q2
q2[1]
q2$numcomb
q2$numcomb[1]
q2$numcomb
numcomb=expand.grid(q$numbers,q$numbers2)
expendFunction<-function(numcomb=expand.grid(a,b);return(numcomb))
expendFunction<-function(numcomb=expand.grid(a,b)
return(numcomb))
source('~/.active-rstudio-document', echo=TRUE)
View(q3)
q3[1]
q3$numcomb
q3$numcomb[1]
as.data.frame(q3)
as.data.frame(q3)->q4
View(q4)
q3%>%do(as.data.frame(.[["numcomb"]]))->q4
View(q4)
q2 %>%
dplyr::group_by(letters)%>%
dplyr::do(numcomb=as.data.frame(expendFunction(a=.[["numbers"]],b=.[["numbers2"]])))->q3
View(q3)
q2 %>%
dplyr::group_by(letters)%>%
dplyr::do(numcomb=data.frame(expendFunction(a=.[["numbers"]],b=.[["numbers2"]])))->q3
q2 %>%
dplyr::group_by(letters)%>%
dplyr::do(numcomb=expendFunction(a=.[["numbers"]],b=.[["numbers2"]]))->q3
q3%>%do(as.data.frame(.[["numcomb"]]))->q4
q3%>%do(as.data.frame(.["letters"],.[["numcomb"]]))->q4
View(q3)
source('~/.active-rstudio-document', echo=TRUE)
View(q3)
source('~/.active-rstudio-document', echo=TRUE)
View(q3)
q3$numcomb[1]
q3$numcomb[1]->m
as.data.frame(q3$numcomb[1])->m
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(numcomb)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
numcomb
numcomb[1]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(q3)
source('~/.active-rstudio-document', echo=TRUE)
View(q3)
source('~/.active-rstudio-document', echo=TRUE)
View(q3)
source('~/.active-rstudio-document', echo=TRUE)
q3 %>% dplyr::do(do.call(data.frame, c(list(numcomb=.$numcomb,
Mutation=.$Mutation,
Cell=.$Cell,
dataSet=.$dataSet))))
View(q3)
q3 %>% dplyr::do(do.call(data.frame, .$numcomb)
)
q3 %>% dplyr::do(do.call(data.frame, .$numcomb))
q3 %>% dplyr::do(do.call(data.frame, .$numcomb,.$letters))
q3 %>% dplyr::do(do.call(data.frame, list(.$letters,.$numcomb))
)
q3 %>% dplyr::do(do.call(dplyr::left_join, list(.$letters,.$numcomb)))
q3 %>% dplyr::do(do.call(dplyr::left_join, list(data.frame(.$letters),data.frame(.$numcomb))))
q3 %>% dplyr::do(do.call(dplyr::rbind_list(), list(data.frame(.$letters),data.frame(.$numcomb))))
q3 %>% dplyr::do(do.call(dplyr::rbind_list(), list((.$letters),(.$numcomb))))
q3 %>% dplyr::do(do.call(dplyr::rbind_list(), list(.$letters,.$numcomb)))
q3 %>% dplyr::do(do.call(data.frame, .$numcomb))
q3 %>% dplyr::do(do.call(data.frame, c(.$letters,.$numcomb)))
q3$letters
q3 %>% dplyr::do(do.call(data.frame, c(list(.$letters),.$numcomb)))
q3 %>% dplyr::do(do.call(data.frame, .$letters,.$numcomb)))
q3 %>% dplyr::do(do.call(data.frame, .$letters,.$numcomb))
q3 %>% dplyr::do(do.call(data.frame, list(.$letters,.$numcomb)))
q3 %>% dplyr::do(do.call(data.frame, list(as.vector(.$letters),.$numcomb)))
q3 %>% dplyr::do(do.call(data.frame, list(letters=as.vector(.$letters),numbers.$numcomb)))
q3 %>% dplyr::do(do.call(data.frame, list(letters=as.vector(.$letters),numbers=.$numcomb)))
install.packages('ReporteRs') # Install
# INITIAL COMMANDS TO RESET THE SYSTEM
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
?tune
??tune
sUm <- 10
f <- function(x, y) {
sum = x + y
return(sUm)
}
f(7,4)
intersect(findGlobals(f), ls(envir=.GlobalEnv))
install.packages(codetools)
install.packages("codetools")
require(codetools)
sUm <- 10
f <- function(x, y) {
sum = x + y
return(sUm)
}
f(7,4)
intersect(findGlobals(f), ls(envir=.GlobalEnv))
require(codetools)
sUm <- 10
sum2
f <- function(x, y) {
sum2 = x + y
sum=sum2
return(sUm)
}
f(7,4)
intersect(findGlobals(f), ls(envir=.GlobalEnv))
require(codetools)
sUm <- 10
sum2<-5
f <- function(x, y) {
sum2 = x + y
sum=sum2
return(sUm)
}
f(7,4)
intersect(findGlobals(f), ls(envir=.GlobalEnv))
findGlobals(f)
ls(envir=.GlobalEnv)
require(codetools)
sUm <- 10
sum2 <- 5
f <- function(x, y) {
sum2 = x + y
sum=sum2
return(sum2)
}
f(7,4)
intersect(findGlobals(f), ls(envir=.GlobalEnv))
require(codetools)
sUm <- 10
sum2 <- 5
f <- function(x, y) {
sum2 = x + y
sUm=sum2
return(sum2)
}
f(7,4)
intersect(findGlobals(f), ls(envir=.GlobalEnv))
require(codetools)
sUm <- 10
sum2 <- 5
f <- function(x, y) {
sum2 = x + y
sum=sUm
return(sum2)
}
f(7,4)
intersect(findGlobals(f), ls(envir=.GlobalEnv))
require(codetools)
sUm <- 10
sum2 <- 5
f <- function(x, y) {
sum2 = x + y
sum=sUm
return(sum2)
}
if(length(intersect(findGlobals(f), ls(envir=.GlobalEnv)))!=0)
{stop("un-intended use of global variable")}
f(7,4)
require(codetools)
sUm <- 10
sum2 <- 5
f <- function(x, y) {
sum2 = x + y
sUm=sum
return(sum2)
}
if(length(intersect(findGlobals(f), ls(envir=.GlobalEnv)))!=0)
{stop("un-intended use of global variable")}
f(7,4)
q<-c(7921, 5184, 8836, 4761); mean(q)
q<-c(7921, 5184, 8836, 4761); q-mean(q)
q<-c(7921, 5184, 8836, 4761); (q-mean(q))/(max(q)-min(q))
source('~/Desktop/sicegar_paper_figure_generation/generateSicegarFigure.R', echo=TRUE)
source('~/Desktop/sicegar_paper_figure_generation/generateSicegarFigure.R', echo=TRUE)
source('~/Desktop/sicegar_paper_figure_generation/generateSicegarFigure.R', echo=TRUE)
fig05
source('~/Desktop/sicegar_paper_figure_generation/generateSicegarFigure.R', echo=TRUE)
fig05
source('~/Desktop/sicegar_paper_figure_generation/generateSicegarFigure.R', echo=TRUE)
fig05
source('~/Desktop/sicegar_paper_figure_generation/generateSicegarFigure.R', echo=TRUE)
fig05
source('~/Desktop/sicegar_paper_figure_generation/generateSicegarFigure.R', echo=TRUE)
fig05
cowplot::align_plots(fig05,fig09)
q<-cowplot::align_plots(fig05,fig09)
print(q)
q<-cowplot::align_plots(fig05,fig09)
q
q<-cowplot::plot_grid(fig05,fig09)
q
??xlab
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/RNA&ProteinComparison.R', echo=TRUE)
read.csv(file = "measured_Genes&Proteins.csv")
mrna_protein<-read.csv(file = "measured_Genes&Proteins.csv")
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/RNA&ProteinComparison.R', echo=TRUE)
View(dictionary)
View(mrna_protein)
colnames(mrna_protein)
mrna_protein %>% dplyr::filter(type="RNA")->mrna_names
mrna_protein %>% dplyr::filter(type=="RNA")->mrna_names
View(dictionary)
colnames(dictionary)
head(dictionary)
mrna_protein %>% dplyr::filter(type=="RNA")->rna_names
mrna_protein %>% dplyr::filter(type=="Protein")->protein_names
head(rna_names)
colnames(rna_names)[2]
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/RNA&ProteinComparison.R', echo=TRUE)
View(protein_names)
View(rna_names)
unique(protein_names$mRNA_ID)
length(unique(protein_names$mRNA_ID))
length(unique(protein_names$Protein_id))
protein_names %>%
dplyr::group_by(mRNA_ID) %>%
dplyr::mutate(length=n())->q
View(q)
protein_names %>%
dplyr::group_by(mRNA_ID) %>%
dplyr::mutate(length=n()) %>%
dplyr::filter(length!=1)->q
View(q)
head(rna_names)
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/RNA&ProteinComparison.R', echo=TRUE)
non_intersecting_rna_names
View(non_intersecting_rna_names)
