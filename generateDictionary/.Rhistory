{
if(!(fitFunction %in% c("linear", "sigmoidal", "double_sigmoidal", "test")) )
{print("fitFunction should be one of linear, sigmoidal, double_sigmoidal, test")}
if(fitFunction == "test"){fitFunctionOutput=exampleFitFunction(randomParameter)}
if(fitFunctionOutput[[1]]){
counterCorrectFit=counterCorrectFit+1
if(residual_Sum_of_Squares_min>fitFunctionOutput$residual_Sum_of_Squares){
counterBetterFit=counterBetterFit+1
residual_Sum_of_Squares_min=fitFunctionOutput$residual_Sum_of_Squares
storedFitFunctionOutput=fitFunctionOutput
}
}
counterTotalFit=counterTotalFit+1
print(c(counterBetterFit,
counterCorrectFit,
counterTotalFit,
storedFitFunctionOutput$residual_Sum_of_Squares))
}
return(storedFitFunctionOutput)
}
counterFunction(3,5,7,20)
counterFunction <-
function(data,fitFunction, n_runs_min, n_runs_max, ...)
{
if(!(fitFunction %in% c("linear", "sigmoidal", "double_sigmoidal", "test")) )
{stop("fitFunction should be one of linear, sigmoidal, double_sigmoidal, test")}
counterBetterFit=0
counterCorrectFit=0
counterTotalFit=0
residual_Sum_of_Squares_min=Inf
storedFitFunctionOutput=list()
storedFitFunctionOutput$residual_Sum_of_Squares=Inf
while(counterCorrectFit<n_runs_min & counterTotalFit<n_runs_max)
{
if(fitFunction == "test"){fitFunctionOutput=exampleFitFunction(randomParameter)}
if(fitFunctionOutput[[1]]){
counterCorrectFit=counterCorrectFit+1
if(residual_Sum_of_Squares_min>fitFunctionOutput$residual_Sum_of_Squares){
counterBetterFit=counterBetterFit+1
residual_Sum_of_Squares_min=fitFunctionOutput$residual_Sum_of_Squares
storedFitFunctionOutput=fitFunctionOutput
}
}
counterTotalFit=counterTotalFit+1
print(c(counterBetterFit,
counterCorrectFit,
counterTotalFit,
storedFitFunctionOutput$residual_Sum_of_Squares))
}
return(storedFitFunctionOutput)
}
counterFunction <-
function(data,fitFunction, n_runs_min, n_runs_max, ...)
{
if(!(fitFunction %in% c("linear", "sigmoidal", "double_sigmoidal", "test")) )
{stop("fitFunction should be one of linear, sigmoidal, double_sigmoidal, test")}
counterBetterFit=0
counterCorrectFit=0
counterTotalFit=0
residual_Sum_of_Squares_min=Inf
storedFitFunctionOutput=list()
storedFitFunctionOutput$residual_Sum_of_Squares=Inf
while(counterCorrectFit<n_runs_min & counterTotalFit<n_runs_max)
{
if(fitFunction == "test"){fitFunctionOutput=exampleFitFunction(randomParameter)}
if(fitFunctionOutput[[1]]){
counterCorrectFit=counterCorrectFit+1
if(residual_Sum_of_Squares_min>fitFunctionOutput$residual_Sum_of_Squares){
counterBetterFit=counterBetterFit+1
residual_Sum_of_Squares_min=fitFunctionOutput$residual_Sum_of_Squares
storedFitFunctionOutput=fitFunctionOutput
}
}
counterTotalFit=counterTotalFit+1
print(c(counterBetterFit,
counterCorrectFit,
counterTotalFit,
storedFitFunctionOutput$residual_Sum_of_Squares))
}
return(storedFitFunctionOutput)
}
counterFunction(3,5,7,20)
counterFunction(3,"test",7,20)
counterFunction(3,"test",7,20)
counterFunction(3,"test",7,20)
# Initial Command to Reset the System
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(dataOutput=dataOutput,
dataScalingParameters=c(timeMin,timeRatio,intensityMin,intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
p<-c(1,2,3)
p
p<-c(a=1,b=2,c=3)
p
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(dataOutput=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput[[2]][1]+dataOutput[[2]][2]*dataOutput[[1]]$hpi
GFP=dataOutput[[2]][3]+dataOutput[[2]][4]*dataOutput[[1]]$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = unnormalizeData(dataInput2)
dataOutput2
p<-list(a=1,b=2)
p
names(p)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = list(timeIntensityData=(data.frame(hpi,GFP)))
dataInput$timeIntensityData$GFP
is.data.frame(dataInput$timeIntensityData)
data_next_check=dataInput$timeIntensityData
"hpi" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFL" %in% names(data_next_check)
is.numeric(data_next_check$hpi)
is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP)
dataCheck <-function(data){
isalist=is.list(data)
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
is.list(dataInput)
is.data.frame(dataInput)
list(data=dataInput,b=3)
p<-list(data=dataInput,b=3)
is.list(p)
is.data.frame(p)
dataCheck <-function(data){
isalist=(is.list(data) & !is.data.frame(data))
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
View(data_next_check)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput$dataScalingParameters$timeMin+
dataOutput$dataScalingParameters$timeRatio*dataOutput$timeIntensityData$hpi
GFP=dataOutput$dataScalingParameters$intensityMin+
dataOutput$dataScalingParameters$intensityRatio*dataOutput$timeIntensityData$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = dataCheck(dataInput2)
dataOutput2
sd(c(3,5))
170*105/151
require("sicegar")
detach(sicegar)
detach("sicegar")
load("~/GitHub/single_cell_virology/processedData/SCV045_filter00_combinedResults.Rda")
View(all_fPc_SCV045_filter00)
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
t(all_fPc_SCV045_filter00[7,])
t(all_fPc_SCV045_filter00[12,])
rep(1:4, 2)
rep("a", 2)
rep(c("a","b"), 2)
rep(c("a","b"), 2,4)
rep(c("a","b"), c(2,4))
rep(c("a","b","c"), c(2,4,6))
FDR?
?
`
""
ELKFWE
QUIR
S
msdnbf
)))
install.packages("ada", "caret", "e1071", "ggplot2", "GGally", "glmnet", "MASS", "randomForest", "reshape2", "sparsediscrim")
install.packages("ada")
install.packages("caret")
install.packages("e1071")
install.packages("ggplot2")
install.packages("GGally")
install.packages("glmnet")
install.packages("MASS")
install.packages("randomForest")
install.packages("reshape2")
install.packages("sparsediscrim")
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
??foreach
install.packages("doMC")
install.packages("foreach")
??foreach
require(doMC)
require(foreach)
??foreach
?foreach
source('~/Desktop/statTest.R', echo=TRUE)
mean(trueSet)
mean(wrongSet)
length(trueSet)
length(wrongSet)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
sprintf("%E", pi)
sprintf("%3E", pi)
sprintf("%.3E", pi)
sprintf("%.3E", 9837649872345095486)
sprintf("%.3e", 9837649872345095486)
sprintf("%.3e", .000000009837649872345095486)
sprintf("%.3E", .000000009837649872345095486)
# Initial Command to Reset the System
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
load("/Users/umut/GitHub/single_cell_virology/processedData/SCV047_mod05filter00_Max1000Min40.Rda")
View(fP_SCV047_mod05filter00_Max1000Min40)
require("RDAVIDWebService")
install.packages("rJava")
require("RDAVIDWebService")
require("rJava")
require("RDAVIDWebService")
require("RDAVIDWebService")
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
genes_0.05
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/ENTREZ_GENE_IDs.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/ENTREZ_GENE_IDs.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/ENTREZ_GENE_IDs.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/ENTREZ_GENE_IDs.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/ENTREZ_GENE_IDs.R', echo=TRUE)
warnings()
require("dplyr")
system()
search()
sessionInfo()
dplyr
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/ENTREZ_GENE_IDs.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/ENTREZ_GENE_IDs.R', echo=TRUE)
dictionaryEz=read.csv(file="../generateDictionary/rna_tidy_eColi_ez.csv")
View(dictionaryEz)
dictionaryEz=read.csv(file="../generateDictionary/rna_tidy_eColi_ez.csv",row.names = 1)
View(dictionaryEz)
dictionary=read.csv(file = "../generateDictionary/nameDictionary_RNA_barrick.csv")
colnames(dictionary)[1]<-"id"
View(dictionary)
View(dictionary)
View(dictionaryEz)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
colnames(dictionaryEz)[["from"]]<-"gene_name"
colnames(dictionaryEz)[["from"]]
dictionaryEz[["from"]]
dictionaryEz
View(colnames(dictionaryEz)[["from"]]<-"gene_name")
head(dictionaryEz)
head(dictionaryEz)
dictionaryEz[["From"]]
colnames(dictionaryEz)
colnames(dictionaryEz)[1]
colnames(dictionaryEz)[["From"]]
dictionaryEz%>%dplyr::rename(From,"gene_name")
dictionaryEz%>%dplyr::rename("From","gene_name")
dictionaryEz%>%dplyr::rename("From"="gene_name")
dictionaryEz%>%dplyr::rename(From="gene_name")
dictionaryEz%>%dplyr::rename(From=gene_name)
dictionaryEz%>%dplyr::rename(gene_name=From)
dictionaryEz%>%dplyr::rename(gene_name=From)->q
View(q)
dictionaryEz%>%dplyr::rename(gene_name<-From)->q
dictionaryEz%>%dplyr::rename(gene_name="From")->q
dictionaryEz%>%dplyr::rename("gene_name"="From")->q
colnames(dictionaryEz)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
genes_0.05
if(length(genes_0.05)!=0){dictionaryEz %>%dplyr::filter(gene_)}
colnames(dictionaryEz)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
colnames(dictionaryEz)
dictionaryEz %>% dplyr::filter(gene_name %in% genes_0.05)%>%.[["ez_gene_id"]]%>%as.vector(.)
dictionaryEz %>% dplyr::filter(gene_name %in% genes_0.05)%>%.[["ez_gene_id"]]%>%as.vector(.)%>%unique(.)
dictionaryEz %>% dplyr::filter(gene_name %in% genes_0.05)%>%.[["ez_gene_id"]]%>%as.vector(.)%>%unique(.)->genes_0.05Ez
listOfFilledCells
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multipleV2.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/generateDictionary/ENTREZ_GENE_IDs.R', echo=TRUE)
View(protein_tidy_ez)
grep("esc",protein_tidy_ez$Species)
unique(grep(pattern = "esc",x = protein_tidy_ez$Species,value = TRUE))
unique(grep(pattern = "Esc",x = protein_tidy_ez$Species,value = TRUE))
unique(grep(pattern = "Escherichia coli",x = protein_tidy_ez$Species,value = TRUE))
