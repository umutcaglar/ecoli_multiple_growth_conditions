"hpi" %in% names(data_next_check) & "GFL" %in% names(data_next_check)
is.numeric(data_next_check$hpi)
is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP)
dataCheck <-function(data){
isalist=is.list(data)
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
is.list(dataInput)
is.data.frame(dataInput)
list(data=dataInput,b=3)
p<-list(data=dataInput,b=3)
is.list(p)
is.data.frame(p)
dataCheck <-function(data){
isalist=(is.list(data) & !is.data.frame(data))
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
View(data_next_check)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput$dataScalingParameters$timeMin+
dataOutput$dataScalingParameters$timeRatio*dataOutput$timeIntensityData$hpi
GFP=dataOutput$dataScalingParameters$intensityMin+
dataOutput$dataScalingParameters$intensityRatio*dataOutput$timeIntensityData$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = dataCheck(dataInput2)
dataOutput2
sd(c(3,5))
170*105/151
require("sicegar")
detach(sicegar)
detach("sicegar")
load("~/GitHub/single_cell_virology/processedData/SCV045_filter00_combinedResults.Rda")
View(all_fPc_SCV045_filter00)
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
t(all_fPc_SCV045_filter00[7,])
t(all_fPc_SCV045_filter00[12,])
rep(1:4, 2)
rep("a", 2)
rep(c("a","b"), 2)
rep(c("a","b"), 2,4)
rep(c("a","b"), c(2,4))
rep(c("a","b","c"), c(2,4,6))
FDR?
?
`
""
ELKFWE
QUIR
S
msdnbf
)))
install.packages("ada", "caret", "e1071", "ggplot2", "GGally", "glmnet", "MASS", "randomForest", "reshape2", "sparsediscrim")
install.packages("ada")
install.packages("caret")
install.packages("e1071")
install.packages("ggplot2")
install.packages("GGally")
install.packages("glmnet")
install.packages("MASS")
install.packages("randomForest")
install.packages("reshape2")
install.packages("sparsediscrim")
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
??foreach
install.packages("doMC")
install.packages("foreach")
??foreach
require(doMC)
require(foreach)
??foreach
?foreach
source('~/Desktop/statTest.R', echo=TRUE)
mean(trueSet)
mean(wrongSet)
length(trueSet)
length(wrongSet)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/qualityControl_protein.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/data_normalization.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/qualityControl_protein.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/data_normalization.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/data_normalization.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/qualityControl_protein.R', echo=TRUE)
View(ratioDfL_sumsummary)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/qualityControl_protein.R', echo=TRUE)
View(ratioDfL_sumsummary)
head(ratioDfL_sumsummary,10)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/qualityControl_protein.R', echo=TRUE)
head(ratioDfL_sumsummary,10)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/generating_Protein_RawCount.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
dataName[1]
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
View(mainDataFrame)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
View(mainDataFrame)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
View(mainDataFrame)
?heatmap
heatmap(mainDataFrame)
heatmap(as.matrix(mainDataFrame))
heatmap(as.matrix(mainDataFrame))
install.packages(heatmap.plusâ€™)
install.packages(heatmap.plus)
install.packages("heatmap.plus")
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
View(mainDataFrame)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
View(condition)
View(condition)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
heatmap(mainDataFrame, scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = "HeatMap Example")
heatmap(x=mainDataFrame, scale = "none", Rowv = NA, Colv = NA, col = cm.colors(2), main = "HeatMap Example")
View(mainDataFrame)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
View(mainDataFrame)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
png(filename = "../a_figures/heatmap.png",width=2000,height=800)
#heatmap()
dev.off()
mainDataFrame[["MURI_85_0"]]
mainDataFrame[["MURI_085_0"]]
mainDataFrame%>%dplyr::filter(MURI_085_0==0)->select(gene_id)
View(mainDataFrame)
mainDataFrame%>%dplyr::filter(MURI_085_0==0)->row.names(.)
mainDataFrame%>%dplyr::filter(MURI_085_0==0)%>%row.names(.)
mainDataFrame%>%dplyr::add_rownames(gene_id)%>%dplyr::filter(MURI_085_0==0)%>%dplyr::select(gene_id)%>%as.vector(.)
mainDataFrame%>%
dplyr::add_rownames(gene_id)
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_085_0==0)%>%
dplyr::select(gene_id)%>%
as.vector(.)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
as.data.frame(GlucoseTimeCourse,GlycerolTimeCourse)
as.data.frame(GlucoseTimeCourse,GlycerolTimeCourse)->q
as.data.frame(c(GlucoseTimeCourse=GlucoseTimeCourse,GlycerolTimeCourse=GlycerolTimeCourse))->q
cbind(c(GlucoseTimeCourse=GlucoseTimeCourse,GlycerolTimeCourse=GlycerolTimeCourse))->q
View(q)
cbind(GlucoseTimeCourse=GlucoseTimeCourse,GlycerolTimeCourse=GlycerolTimeCourse)->q
install.packages("qpcR")
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
cbind.na(GlucoseTimeCourse=GlucoseTimeCourse,GlycerolTimeCourse=GlycerolTimeCourse)->q
require("qPCR")
require("qpcR")
install.packages("rg1")
install.packages("rgl")
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
require("rgl")
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
cbind.na(GlucoseTimeCourse=GlucoseTimeCourse,GlycerolTimeCourse=GlycerolTimeCourse)->q
qpcR:::cbind.na(GlucoseTimeCourse=GlucoseTimeCourse,GlycerolTimeCourse=GlycerolTimeCourse)->q
install.packages("ChemoSpec")
qpcR:::cbind.na(GlucoseTimeCourse=GlucoseTimeCourse,GlycerolTimeCourse=GlycerolTimeCourse)->q
max(length(lactate),length(gluconate),length(Mg),length(Na),length(GlucoseTimeCourse),length(GlycerolTimeCourse))
GlycerolTimeCourse
nrow(GlycerolTimeCourse)
length(GlycerolTimeCourse)
length(t(GlycerolTimeCourse))
max(length(t(lactate)),
length(t(gluconate)),
length(t(Mg)),
length(t(Na)),
length(t(GlucoseTimeCourse)),
length(t(GlycerolTimeCourse)))
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_089_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->lactate
lactate
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_089_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->lactate
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_095_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->gluconate
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_134_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->Mg
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_098_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->GlucoseTimeCourse
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_079_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->Na
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_053_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->GlycerolTimeCourse
maxLenght=max(length(lactate),
length(gluconate),
length(Mg),
length(Na),
length(GlucoseTimeCourse),
length(GlycerolTimeCourse))
maxLenght
# find not existed genes
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_089_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->lactate
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_095_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->gluconate
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_134_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->Mg
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_098_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->GlucoseTimeCourse
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_079_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->Na
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_053_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->GlycerolTimeCourse
maxLenght=max(length(lactate),
length(gluconate),
length(Mg),
length(Na),
length(GlucoseTimeCourse),
length(GlycerolTimeCourse))
length(lactate)<-maxLenght
length(gluconate)<-maxLenght
length(Mg)<-maxLenght
length(Na)<-maxLenght
length(GlucoseTimeCourse)<-maxLenght
length(GlucoseTimeCourse)<-maxLenght
rbind_list(lactate,gluconate,Mg,Na,GlucoseTimeCourse,GlycerolTimeCourse)->list
rbind(lactate,gluconate,Mg,Na,GlucoseTimeCourse,GlycerolTimeCourse)->list
# find not existed genes
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_089_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->lactate
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_095_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->gluconate
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_134_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->Mg
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_098_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->GlucoseTimeCourse
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_079_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->Na
mainDataFrame%>%
dplyr::add_rownames(var = "gene_id")%>%
dplyr::filter(MURI_053_0==0)%>%
dplyr::select(gene_id)%>%
t(.)%>%
as.vector(.)->GlycerolTimeCourse
maxLenght=max(length(lactate),
length(gluconate),
length(Mg),
length(Na),
length(GlucoseTimeCourse),
length(GlycerolTimeCourse))
length(lactate)<-maxLenght
length(gluconate)<-maxLenght
length(Mg)<-maxLenght
length(Na)<-maxLenght
length(GlucoseTimeCourse)<-maxLenght
length(GlycerolTimeCourse)<-maxLenght
rbind(lactate,gluconate,Mg,Na,GlucoseTimeCourse,GlycerolTimeCourse)->list
View(list)
cbind(lactate,gluconate,Mg,Na,GlucoseTimeCourse,GlycerolTimeCourse)->list
View(list)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/generating_Protein_RawCount.R', echo=TRUE)
temp%>%dplyr::filter(gene_id=="YP_003047113.1")
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/generating_Protein_RawCount.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/generating_Protein_RawCount.R', echo=TRUE)
RawProtein_FileList[counter01]
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/generating_Protein_RawCount.R', echo=TRUE)
temp%>%dplyr::filter(gene_id=="YP_003047113.1")
temp%>%dplyr::filter(gene_id=="YP_003047113.1")
proteinMatrix%>%dplyr::filter(gene_id=="YP_003047113.1")
proteinMatrix_w_NA%>%dplyr::filter(gene_id=="YP_003047113.1")
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
mainDataFrame%>%dplyr::filter(gene_id=="YP_003047113.1")
View(mainDataFrame)
mainDataFrame%>%dplyr::add_rownames("gene_id")%>%dplyr::filter(gene_id=="YP_003047113.1")
mainDataFrame%>%dplyr::add_rownames("gene_id")%>%dplyr::filter(gene_id=="YP_003047113.1")->q
View(q)
mainDataFrame%>%dplyr::add_rownames("gene_id")%>%dplyr::filter(gene_id=="YP_003047113.1")%>%dplyr::select(MURI_134_0)->q
View(q)
View(mainDataFrame)
source('~/GitHub/ecoli_multiple_growth_conditions/a_code_dataPreperation_RNA&Protein/investigateProteinNA.R', echo=TRUE)
View(list)
View(list)
write.csv(x = list,file = "../a_results/missingProteins.csv")
