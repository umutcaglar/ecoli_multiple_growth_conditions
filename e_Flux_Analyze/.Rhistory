cat("\014")
set.seed(14159)
###*****************************
###*****************************
# Set Working Directory
# One needs to arrange the correct pathway if this is not umut's computer ;)
if(as.vector(Sys.info()["effective_user"]=="umut"))
{setwd(paste0("/Users/umut/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/"))} # mac computer
###*****************************
###*****************************
# DOWNLOAD LIBRARIES
require("Biobase")
require("dplyr")
require("tidyr")
require("DESeq2")
require("RDAVIDWebService")
require(org.Hs.eg.db)
###*****************************
###*****************************
#Load Functions
source("../a_code_dataPreperation_RNA&Protein/data_naming_functions.R")
###*****************************
###*****************************
# Find the csv files that need to be imported
dataName=name_data(initialValue=c("ez_P0.05Fold2"), # can be c("genes0.05","genes_P0.05Fold2","resDf")
dataType = "mrna", # can be "rna", "mrna", "protein", "protein_wo_NA"
badDataSet = "set00", # can be "set00",set01","set02", "set03"
# referenceParameters can be a vector like
# c("growthPhase", "Mg_mM_Levels", "Na_mM_Levels", "carbonSource", "experiment")
referenceParameters=c("growthPhase",
"Mg_mM_Levels",
"Na_mM_Levels",
"carbonSource",
"experiment"),
# referenceLevels can be a vector like
# c("exponential", "baseMg", "baseNa", "glucose", "glucose_time_course")
referenceLevels=c("exponential",
"baseMg",
"baseNa",
"glucose",
"glucose_time_course"),
experimentVector = c("allEx"), # can be "Stc","Ytc","Nas","Agr","Ngr","Mgl","Mgh" // "allEx"
carbonSourceVector = "SYAN", # can be any sub combination of "SYAN"
MgLevelVector = c("allMg"), # can be "lowMg","baseMg","highMg" // "allMg"
NaLevelVector = c("allNa"), # can be "baseNa","highNa" // "allNa"
growthPhaseVector = c("exponential"), # can be "exponential","stationary","late_stationary" // "allPhase"
filterGenes = "noFilter", # can be "noFilter", "meanFilter", "maxFilter", "sdFilter"
threshold=NA, # the threshold value for "meanFilter", "maxFilter", "sdFilter"
roundData=TRUE,
sumTechnicalReplicates=TRUE,
deSeqSfChoice="p1Sf", # can be "regSf", "p1Sf", "noSf"
normalizationMethodChoice= "noNorm", # can be "vst", "rlog", "log10", "noNorm"
test_for = "carbonSource")  # works only if normalizationMethodChoice == noNorm
# c("Mg_mM_Levels", "Na_mM_Levels", "growthPhase", "carbonSource", "noTest")
objectName=as.data.frame(dataName[[1]])
###*****************************
###*****************************
#Update objectName
test_base="glucose"
test_contrast="glycerol"
test_for=objectName$test_for
objectName$test_for=paste0("_batchNumberPLUS",gsub("_","",test_for))
objectName$contrast=paste0("_",test_contrast,"VS",test_base)
###*****************************
###****************************
# Generate Object name
fileName=paste(objectName,collapse = "_")
###*****************************
###*****************************
# Load data
davidInputData=read.csv(file = paste0("../c_results/" ,fileName,".csv"),header = TRUE)
davidInputData=as.vector(davidInputData[[1]])
#davidInputData=read.csv(file="../../../Desktop/test2.csv")
#davidInputData=as.character(as.vector(davidInputData[[1]]))
###*****************************
david<-DAVIDWebService(email="umut.caglar@utexas.edu",
url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
RDAVIDWebService::setTimeOut(david, 90000)
###*****************************
result<-addList(david, davidInputData, idType="ENTREZ_GENE_ID", listName="testList", listType="Gene")
david
###*****************************
# Set species and backround
selectedSpecie="Escherichia coli"
backgroundLocation=grep(selectedSpecie,RDAVIDWebService::getBackgroundListNames(david))
specieLocation=grep(selectedSpecie,RDAVIDWebService::getSpecieNames(david))
setCurrentSpecies(object=david, species=specieLocation);setCurrentBackgroundPosition(object=david,position=backgroundLocation)
###*****************************
david
# MF OLD TEST
setAnnotationCategories(david, c("GOTERM_MF_ALL"))
objectName$analyzeType="mf_o"
fileName=paste(objectName,collapse = "_")
mfObject<- as.data.frame(getFunctionalAnnotationChart(object=david,  threshold=1, count=0L))
write.csv(x =mfObject ,file = paste0("../c_results/david_results/",fileName,".csv"))
###*****************************
quit()
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_MF_multiple.R', echo=TRUE)
head(mf_tidy_organized_simp)
options(dplyr.width = Inf)
head(mf_tidy_organized_simp)
mf_tidy_organized_simp$MF_Short
gregexpr('',mf_tidy_organized_simp$MF_Short)
gregexpr(' ',mf_tidy_organized_simp$MF_Short)
data.frame(gregexpr(' ',mf_tidy_organized_simp$MF_Short))
(gregexpr(' ',mf_tidy_organized_simp$MF_Short))[,2]
(gregexpr(' ',mf_tidy_organized_simp$MF_Short))[][2]
(gregexpr(' ',mf_tidy_organized_simp$MF_Short))[[]][]
(gregexpr(' ',mf_tidy_organized_simp$MF_Short))[[]][2]
(gregexpr(' ',mf_tidy_organized_simp$MF_Short))[2]
gregexpr(' ',mf_tidy_organized_simp$MF_Short))[1]
gregexpr(' ',mf_tidy_organized_simp$MF_Short))[[1]]
gregexpr(' ',mf_tidy_organized_simp$MF_Short))
gregexpr(' ',mf_tidy_organized_simp$MF_Short)))
gregexpr(' ',mf_tidy_organized_simp$MF_Short)
gregexpr(' ',mf_tidy_organized_simp$MF_Short)[1]
gregexpr(' ',mf_tidy_organized_simp$MF_Short)[1][1]
gregexpr(' ',mf_tidy_organized_simp$MF_Short)[[1]]
gregexpr(' ',mf_tidy_organized_simp$MF_Short)[[1]][1]
gregexpr(' ',mf_tidy_organized_simp$MF_Short)[[1]][2]
function<-findLocation(string00){}
gregexpr(' ',mf_tidy_organized_simp$MF_Short[1])
gregexpr(' ',mf_tidy_organized_simp$MF_Short[1])[[1]]
gregexpr(' ',mf_tidy_organized_simp$MF_Short[1])[[1]][2]
as.vector(gregexpr(' ',mf_tidy_organized_simp$MF_Short[1])[[1]])
stringCutLocation<-function(string00)
{
gregexpr(' ',string)
}
stringCutLocation<-function(string00)
{
gregexpr(' ',string)
browser()
}
stringCutLocation<-function(string00)
{
locationOfSpaces=as.vector(gregexpr(' ',string))
browser()
}
stringCutLocation(string00)
stringCutLocation(mf_tidy_organized_simp$MF_Short[1])
stringCutLocation<-function(string00)
{
locationOfSpaces=as.vector(gregexpr(' ',string00))
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short[1])
locationOfSpaces
stringCutLocation<-function(string00)
{
locationOfSpaces=as.vector(gregexpr(' ',string00))[[1]]
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short[1])
locationOfSpaces
stringCutLocation<-function(string00)
{
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
browser()
}
mf_tidy_organized_simp
mf_tidy_organized_simp$MF_Short
mf_tidy_organized_simp$MF_Short[1]
stringCutLocation<-function(mf_tidy_organized_simp$MF_Short[1])
stringCutLocation<-function(mf_tidy_organized_simp$MF_Short)
stringCutLocation<-function(mf_tidy_organized_simp)
)
stringCutLocation<-function(string00)
{
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short)
locationOfSpaces
stringCutLocation<-function(string00)
{
lengthOfString=nchar(string00)
locationOfSpaces=string00
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short)
stringCutLocation<-function(string00)
{
lengthOfString=nchar(string00)
locationOfSpaces=string00
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short)
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=string00
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short)
lengthOfString
string00
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short[1])
lengthOfString
locationOfSpaces
locationOfSpaces=c(1,3,5,24,27)
locationOfSpaces
locationOfSpaces<25
locationOfSpaces[locationOfSpaces<25]
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces<-locationOfSpaces[locationOfSpaces<25]
maxLoc=max(locationOfSpaces)
}
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short[17])
maxLoc
string00
max(ncar(mf_tidy_organized_simp$MF_Short))
max(nchar(mf_tidy_organized_simp$MF_Short))
max(nchar(as.character(mf_tidy_organized_simp$MF_Short)))
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStrsubstr(string00, maxLoc1+1, lengthOfString)
}
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short[1])
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStrsubstr(string00, maxLoc1+1, lengthOfString)
}
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short[1])
iniStr
stringCutLocation(mf_tidy_organized_simp$MF_Short[17])
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
}
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short[17])
iniStr
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
newStr=paste0(iniStr,"\n",finStr)
}
browser()
}
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
newStr=paste0(iniStr,"\n",finStr)
}
browser()
}
stringCutLocation(mf_tidy_organized_simp$MF_Short[17])
newStr
stringCutLocation<-function(string00)
{
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
newStr=paste0(iniStr,"\n",finStr)
}
else
{
newStr=string00
}
return(newStr)
}
dplyr::mutate(mf_tidy_organized_simp,MF_Short2=stringCutLocation(MF_Short))->q
stringCutLocation(mf_tidy_organized_simp$MF_Short[17])
mf_tidy_organized_simp
mf_tidy_organized_simp %>%
dplyr::group_by(MF_Short,gene_number)%>%
dplyr::mutate(MF_Short2=stringCutLocation(MF_Short))->q
mf_tidy_organized_simp %>%
dplyr::group_by(MF_Short,gene_number)
mf_tidy_organized_simp %>%
dplyr::group_by(MF_Short,gene_number)%>%
dplyr::mutate(MF_Short2=stringCutLocation(MF_Short))->q
stringCutLocation<-function(string00)
{
browser()
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
newStr=paste0(iniStr,"\n",finStr)
}
else
{
newStr=string00
}
return(newStr)
}
mf_tidy_organized_simp %>%
dplyr::group_by(MF_Short,gene_number)%>%
dplyr::mutate(MF_Short2=stringCutLocation(MF_Short))->q
string00
stringCutLocation<-function(string00)
{
string00=as.character(string00)
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
newStr=paste0(iniStr,"\n",finStr)
}
else
{
newStr=string00
}
return(newStr)
}
mf_tidy_organized_simp %>%
dplyr::group_by(MF_Short,gene_number)%>%
dplyr::mutate(MF_Short2=stringCutLocation(MF_Short))->q
View(q)
stringCutLocation<-function(string00)
{
string00=as.character(string00)
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
newStr=paste0(iniStr,"\n",finStr)
browser()
}
else
{
newStr=string00
}
return(newStr)
}
mf_tidy_organized_simp %>%
dplyr::group_by(MF_Short,gene_number)%>%
dplyr::mutate(MF_Short2=stringCutLocation(MF_Short))->q
newStr
newStr
stringCutLocation<-function(string00)
{
string00=as.character(string00)
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
newStr=paste0(iniStr,"\n",finStr)
}
else
{
newStr=string00
}
return(newStr)
}
mf_tidy_organized_simp %>%
dplyr::group_by(MF_Short,gene_number)%>%
dplyr::mutate(MF_Short2=stringCutLocation(MF_Short))->q
View(q)
q$MF_Short2
minimumFold=min(mf_tidy_organized_simp$log2)
if(minimumFold>-1){minimumFold=-1}
maximumFold=max(mf_tidy_organized_simp$log2)
if(maximumFold<1){maximumFold=1}
fig02=ggplot(mf_tidy_organized_simp, aes( x=log2,y=MF_Short_2Line)) +
geom_point(colour="blue", size=2.5)+
geom_vline(xintercept = c(log2(1/2),log2(2)), colour="orange", linetype = "longdash")+
geom_vline(xintercept = c(log2(1)), colour="black", linetype = "longdash")+
geom_text_repel(aes(label=gene_name),size=3, colour="Black", fontface="plain")+
theme_bw()+
scale_x_continuous(breaks=seq(floor(minimumFold),ceiling(maximumFold)))+
xlab("Log2 Fold Change")+
theme(axis.line.y = element_blank(),
legend.position="bottom",
axis.title.y = element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x=element_blank(),
strip.text.x = element_text(size = 16),
strip.text.y = element_text(size = 16),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=16),
axis.title.y=element_text(size=16),
legend.title=element_text(size=14),
legend.text=element_text(size=14))
print(fig02)
stringCutLocationMF<-function(string00)
{
string00=as.character(string00)
lengthOfString=nchar(as.character(string00))
locationOfSpaces=as.vector(gregexpr(' ',string00)[[1]])
if(lengthOfString>25)
{
locationOfSpaces1<-locationOfSpaces[locationOfSpaces<25]
maxLoc1=max(locationOfSpaces1)
iniStr=substr(string00, 1, maxLoc1-1)
finStr=substr(string00, maxLoc1+1, lengthOfString)
newStr=paste0(iniStr,"\n",finStr)
}
else
{
newStr=string00
}
return(newStr)
}
mf_tidy_organized_simp %>%
dplyr::group_by(MF_Short,gene_number)%>%
dplyr::mutate(MF_Short_2Line=stringCutLocation(MF_Short))->mf_tidy_organized_simp
###*****************************
###*****************************
# simple figure with geom point
browser()
minimumFold=min(mf_tidy_organized_simp$log2)
if(minimumFold>-1){minimumFold=-1}
maximumFold=max(mf_tidy_organized_simp$log2)
if(maximumFold<1){maximumFold=1}
fig02=ggplot(mf_tidy_organized_simp, aes( x=log2,y=MF_Short_2Line)) +
geom_point(colour="blue", size=2.5)+
geom_vline(xintercept = c(log2(1/2),log2(2)), colour="orange", linetype = "longdash")+
geom_vline(xintercept = c(log2(1)), colour="black", linetype = "longdash")+
geom_text_repel(aes(label=gene_name),size=3, colour="Black", fontface="plain")+
theme_bw()+
scale_x_continuous(breaks=seq(floor(minimumFold),ceiling(maximumFold)))+
xlab("Log2 Fold Change")+
theme(axis.line.y = element_blank(),
legend.position="bottom",
axis.title.y = element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x=element_blank(),
strip.text.x = element_text(size = 16),
strip.text.y = element_text(size = 16),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=12),
axis.title.x=element_text(size=16),
axis.title.y=element_text(size=16),
legend.title=element_text(size=14),
legend.text=element_text(size=14))
print(fig02)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg_multiple.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg_multiple.R', echo=TRUE)
{setwd(paste0("/Users/umut/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/"))} # mac computer
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
View(data)
View(data_unnest)
?cowplot::plot_grid
