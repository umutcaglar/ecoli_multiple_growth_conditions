dataOutput = normalizeData(dataInput)
dataOutput
p<-c(1,2,3)
p
p<-c(a=1,b=2,c=3)
p
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(dataOutput=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput[[2]][1]+dataOutput[[2]][2]*dataOutput[[1]]$hpi
GFP=dataOutput[[2]][3]+dataOutput[[2]][4]*dataOutput[[1]]$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = unnormalizeData(dataInput2)
dataOutput2
p<-list(a=1,b=2)
p
names(p)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = list(timeIntensityData=(data.frame(hpi,GFP)))
dataInput$timeIntensityData$GFP
is.data.frame(dataInput$timeIntensityData)
data_next_check=dataInput$timeIntensityData
"hpi" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFL" %in% names(data_next_check)
is.numeric(data_next_check$hpi)
is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP)
dataCheck <-function(data){
isalist=is.list(data)
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
is.list(dataInput)
is.data.frame(dataInput)
list(data=dataInput,b=3)
p<-list(data=dataInput,b=3)
is.list(p)
is.data.frame(p)
dataCheck <-function(data){
isalist=(is.list(data) & !is.data.frame(data))
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
View(data_next_check)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput$dataScalingParameters$timeMin+
dataOutput$dataScalingParameters$timeRatio*dataOutput$timeIntensityData$hpi
GFP=dataOutput$dataScalingParameters$intensityMin+
dataOutput$dataScalingParameters$intensityRatio*dataOutput$timeIntensityData$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = dataCheck(dataInput2)
dataOutput2
sd(c(3,5))
170*105/151
require("sicegar")
detach(sicegar)
detach("sicegar")
load("~/GitHub/single_cell_virology/processedData/SCV045_filter00_combinedResults.Rda")
View(all_fPc_SCV045_filter00)
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
t(all_fPc_SCV045_filter00[7,])
t(all_fPc_SCV045_filter00[12,])
rep(1:4, 2)
rep("a", 2)
rep(c("a","b"), 2)
rep(c("a","b"), 2,4)
rep(c("a","b"), c(2,4))
rep(c("a","b","c"), c(2,4,6))
FDR?
?
`
""
ELKFWE
QUIR
S
msdnbf
)))
install.packages("ada", "caret", "e1071", "ggplot2", "GGally", "glmnet", "MASS", "randomForest", "reshape2", "sparsediscrim")
install.packages("ada")
install.packages("caret")
install.packages("e1071")
install.packages("ggplot2")
install.packages("GGally")
install.packages("glmnet")
install.packages("MASS")
install.packages("randomForest")
install.packages("reshape2")
install.packages("sparsediscrim")
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
??foreach
install.packages("doMC")
install.packages("foreach")
??foreach
require(doMC)
require(foreach)
??foreach
?foreach
source('~/Desktop/statTest.R', echo=TRUE)
mean(trueSet)
mean(wrongSet)
length(trueSet)
length(wrongSet)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
sprintf("%E", pi)
sprintf("%3E", pi)
sprintf("%.3E", pi)
sprintf("%.3E", 9837649872345095486)
sprintf("%.3e", 9837649872345095486)
sprintf("%.3e", .000000009837649872345095486)
sprintf("%.3E", .000000009837649872345095486)
# Initial Command to Reset the System
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
load("/Users/umut/GitHub/single_cell_virology/processedData/SCV047_mod05filter00_Max1000Min40.Rda")
View(fP_SCV047_mod05filter00_Max1000Min40)
fig01<-ggplot2::ggplot(data_plots_Na_exp,aes(x=Conc, y=MeanFluxRatio, colour=Branch)) +
geom_point(size=1.5) +
#geom_line() +
facet_grid(Phase2 ~ Branch)+
geom_errorbar(aes(y = MeanFluxRatio,
ymin = MeanFluxRatio-SDEFluxRatio,
ymax = MeanFluxRatio+SDEFluxRatio,
color = Branch),
width = 5,
data = data_plots_Na)+
labs(y="Flux Ratio", x="Concentration") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text.x = element_text(size = 6, face = "bold"),
strip.text.y = element_text(face = "bold"),
legend.position="none",
panel.grid.minor = element_blank())
print(fig01)
data_plots %>%dplyr::filter(Salt=="MGSO4", Phase=="EXP") ->data_plots_Mg_exp
data_plots %>%dplyr::filter(Salt=="NACL", Phase=="EXP")->data_plots_Na_exp
data_plots %>%dplyr::filter(Salt=="MGSO4", Phase=="STA") ->data_plots_Mg_sta
data_plots %>%dplyr::filter(Salt=="NACL", Phase=="STA")->data_plots_Na_sta
library(reader) # for readLines()
library(dplyr)  # for mutate()
library(tidyr)  # for unnest()
library(purrr)  # for map(), reduce()
library(ggplot2) # for ggplot()
library(cowplot) # for plot_grid() making publication ready figures
library(stringr) # for str_extract()
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
fig01<-ggplot2::ggplot(data_plots_Na_exp,aes(x=Conc, y=MeanFluxRatio, colour=Branch)) +
geom_point(size=1.5) +
#geom_line() +
facet_grid(Phase2 ~ Branch)+
geom_errorbar(aes(y = MeanFluxRatio,
ymin = MeanFluxRatio-SDEFluxRatio,
ymax = MeanFluxRatio+SDEFluxRatio,
color = Branch),
width = 5,
data = data_plots_Na_exp+
labs(y="Flux Ratio", x="Concentration") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text.x = element_text(size = 6, face = "bold"),
strip.text.y = element_text(face = "bold"),
legend.position="none",
panel.grid.minor = element_blank())
fig01<-ggplot2::ggplot(data_plots_Na_exp,aes(x=Conc, y=MeanFluxRatio, colour=Branch)) +
geom_point(size=1.5) +
#geom_line() +
facet_grid(Phase2 ~ Branch)+
geom_errorbar(aes(y = MeanFluxRatio,
ymin = MeanFluxRatio-SDEFluxRatio,
ymax = MeanFluxRatio+SDEFluxRatio,
color = Branch),
width = 5,
data = data_plots_Na_exp+
labs(y="Flux Ratio", x="Concentration") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text.x = element_text(size = 6, face = "bold"),
strip.text.y = element_text(face = "bold"),
legend.position="none",
panel.grid.minor = element_blank())
print(fig01)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
cowplot::save_plot(filename = "../e_figures/Exp.pdf",plot = fig_exp,nrow = 1.7,ncol = 3)
cowplot::save_plot(filename = "../e_figures/Sta.pdf",plot = fig_sta,nrow = 1.7,ncol = 3)
###*****************************
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
cowplot::save_plot(filename = "../e_figures/Exp.pdf",plot = fig_exp,nrow = 1.7,ncol = 3)
cowplot::save_plot(filename = "../e_figures/Sta.pdf",plot = fig_sta,nrow = 1.7,ncol = 3)
###*****************************
# Figure Generation (My Turn)
data_plots %>% dplyr::mutate(Phase2=replace_fun(input_vector = Phase,
initialVal = c("EXP", "STA"),
finalVal = c("Exponential", "Stationary")))->data_plots
# data_plots %>% dplyr::filter(Phase=="EXP")->data_plots_exp
# data_plots %>% dplyr::filter(Phase=="STA")->data_plots_sta
#
# data_plots %>%dplyr::filter(Salt=="MGSO4") ->data_plots_Mg
# data_plots %>%dplyr::filter(Salt=="NACL")->data_plots_Na
data_plots %>%dplyr::filter(Salt=="MGSO4", Phase=="EXP") ->data_plots_Mg_exp
data_plots %>%dplyr::filter(Salt=="NACL", Phase=="EXP")->data_plots_Na_exp
data_plots %>%dplyr::filter(Salt=="MGSO4", Phase=="STA") ->data_plots_Mg_sta
data_plots %>%dplyr::filter(Salt=="NACL", Phase=="STA")->data_plots_Na_sta
fig_Na_exp<-ggplot2::ggplot(data_plots_Na_exp,aes(x=Conc, y=MeanFluxRatio, colour=Branch)) +
geom_point(size=1.5) +
#geom_line() +
facet_grid(Phase2 ~ Branch)+
geom_errorbar(aes(y = MeanFluxRatio,
ymin = MeanFluxRatio-SDEFluxRatio,
ymax = MeanFluxRatio+SDEFluxRatio,
color = Branch),
width = 5,
data = data_plots_Na_exp)+
labs(y="Flux Ratio", x="Concentration") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text.x = element_text(size = 6, face = "bold"),
strip.text.y = element_text(face = "bold"),
legend.position="none",
panel.grid.minor = element_blank())
print(fig_Na_exp)
fig_Na_sta<-ggplot2::ggplot(data_plots_Na_sta,aes(x=Conc, y=MeanFluxRatio, colour=Branch)) +
geom_point(size=1.5) +
#geom_line() +
facet_grid(Phase2 ~ Branch)+
geom_errorbar(aes(y = MeanFluxRatio,
ymin = MeanFluxRatio-SDEFluxRatio,
ymax = MeanFluxRatio+SDEFluxRatio,
color = Branch),
width = 5,
data = data_plots_Na_sta)+
labs(y="Flux Ratio", x="Concentration") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text.x = element_text(size = 6, face = "bold"),
strip.text.y = element_text(face = "bold"),
legend.position="none",
panel.grid.minor = element_blank())
print(fig_Na_sta)
fig_Mg_exp<-ggplot2::ggplot(data_plots_Mg_exp,aes(x=Conc, y=MeanFluxRatio, colour=Branch)) +
geom_point(size=1.5) +
#geom_line() +
scale_x_log10(limits=c(1e-2,400),
breaks=c(0.1,1,10,400),
labels=c(0.1,1,10,400))+
facet_grid(Phase2 ~ Branch)+
geom_errorbar(aes(y = MeanFluxRatio,
ymin = MeanFluxRatio-SDEFluxRatio,
ymax = MeanFluxRatio+SDEFluxRatio,
color = Branch),
width = 5,
data = data_plots_Mg_exp)+
labs(y="Flux Ratio", x="Concentration") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text.x = element_text(size = 6, face = "bold"),
strip.text.y = element_text(face = "bold"),
legend.position="none",
panel.grid.minor = element_blank())
print(fig_Mg_exp)
fig_Mg_sta<-ggplot2::ggplot(data_plots_Mg_sta,aes(x=Conc, y=MeanFluxRatio, colour=Branch)) +
geom_point(size=1.5) +
#geom_line() +
scale_x_log10(limits=c(1e-2,400),
breaks=c(0.1,1,10,400),
labels=c(0.1,1,10,400))+
facet_grid(Phase2 ~ Branch)+
geom_errorbar(aes(y = MeanFluxRatio,
ymin = MeanFluxRatio-SDEFluxRatio,
ymax = MeanFluxRatio+SDEFluxRatio,
color = Branch),
width = 5,
data = data_plots_Mg_sta)+
labs(y="Flux Ratio", x="Concentration") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text.x = element_text(size = 6, face = "bold"),
strip.text.y = element_text(face = "bold"),
legend.position="none",
panel.grid.minor = element_blank())
print(fig_Mg_sta)
# Combine plots
fig_exp<-cowplot::plot_grid(fig_Na_exp, fig_Mg_exp, labels = c("A", "B"), nrow = 2)
print(fig_exp)
fig_sta<-cowplot::plot_grid(fig_Na_sta, fig_Mg_sta, labels = c("A", "B"), nrow = 2)
print(fig_sta)
cowplot::save_plot(filename = "../e_figures/Exp.pdf",plot = fig_exp,nrow = 1.7,ncol = 3)
cowplot::save_plot(filename = "../e_figures/Sta.pdf",plot = fig_sta,nrow = 1.7,ncol = 3)
###*****************************
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/e_Flux_Analyze/FluxSaltStressAnalyze.R', echo=TRUE)
cowplot::save_plot(filename = "../e_figures/Exp.pdf",plot = fig_exp,nrow = 1.7*2,ncol = 3)
cowplot::save_plot(filename = "../e_figures/Sta.pdf",plot = fig_sta,nrow = 1.7*2,ncol = 3)
###*****************************
