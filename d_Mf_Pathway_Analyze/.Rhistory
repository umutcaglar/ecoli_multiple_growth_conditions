timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(dataOutput=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput[[2]][1]+dataOutput[[2]][2]*dataOutput[[1]]$hpi
GFP=dataOutput[[2]][3]+dataOutput[[2]][4]*dataOutput[[1]]$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = unnormalizeData(dataInput2)
dataOutput2
p<-list(a=1,b=2)
p
names(p)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = list(timeIntensityData=(data.frame(hpi,GFP)))
dataInput$timeIntensityData$GFP
is.data.frame(dataInput$timeIntensityData)
data_next_check=dataInput$timeIntensityData
"hpi" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFL" %in% names(data_next_check)
is.numeric(data_next_check$hpi)
is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP)
dataCheck <-function(data){
isalist=is.list(data)
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
is.list(dataInput)
is.data.frame(dataInput)
list(data=dataInput,b=3)
p<-list(data=dataInput,b=3)
is.list(p)
is.data.frame(p)
dataCheck <-function(data){
isalist=(is.list(data) & !is.data.frame(data))
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
View(data_next_check)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput$dataScalingParameters$timeMin+
dataOutput$dataScalingParameters$timeRatio*dataOutput$timeIntensityData$hpi
GFP=dataOutput$dataScalingParameters$intensityMin+
dataOutput$dataScalingParameters$intensityRatio*dataOutput$timeIntensityData$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = dataCheck(dataInput2)
dataOutput2
sd(c(3,5))
170*105/151
require("sicegar")
detach(sicegar)
detach("sicegar")
load("~/GitHub/single_cell_virology/processedData/SCV045_filter00_combinedResults.Rda")
View(all_fPc_SCV045_filter00)
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
t(all_fPc_SCV045_filter00[7,])
t(all_fPc_SCV045_filter00[12,])
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DeSeq_DAVID/DESeq_David.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DeSeq_DAVID/DESeq_David.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DeSeq_DAVID/DESeq_David.R', echo=TRUE)
# Analayze Kegg Pathways DESeq + DAVID
## DeSeq Normalization Cleaned 03
# The aim of the code is to generate normalized data matrix.
# The work flow compses of four parts
# Pick up the samples
# pick up the rows
# calculate size factors
# do the normalization
###*****************************
# INITIAL COMMANDS TO RESET THE SYSTEM
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
###*****************************
###*****************************
# Set Working Directory
# One needs to arrange the correct pathway if this is not umut's computer ;)
if(as.vector(Sys.info()["effective_user"]=="umut"))
{setwd(paste0("/Users/umut/GitHub/ecoli_multiple_growth_conditions/",
"d_Mf_Pathway_Analyze/DeSeq_DAVID/"))} # mac computer
source("../../c_code_change_wrt_variables_RNA&Protein/data_naming_functions.R")
dataName=name_data(dataType = "mrna", # can be "rna", "mrna", "protein", "protein_wo_NA"
badDataSet = "set02", # can be "set00",set01","set02", "set03"
# referenceParameters can be a vector like
# c("growthPhase", "Mg_mM_Levels", "Na_mM_Levels", "carbonSource", "experiment")
referenceParameters=c("growthPhase",
"Mg_mM_Levels",
"Na_mM_Levels",
"carbonSource",
"experiment"),
# referenceLevels can be a vector like
# c("exponential", "baseMg", "baseNa", "glucose", "glucose_time_course")
referenceLevels=c("exponential",
"baseMg",
"baseNa",
"glucose",
"glucose_time_course"),
experimentVector = c("allEx"), # can be "Stc","Ytc","Nas","Agr","Ngr","Mgl","Mgh" // "allEx"
carbonSourceVector = "S", # can be any sub combination of "SYAN"
MgLevelVector = c("baseMg"), # can be "lowMg","baseMg","highMg" // "allMg"
NaLevelVector = c("allNa"), # can be "baseNa","highNa" // "allNa"
growthPhaseVector = c("exponential"), # can be "exponential","stationary","late_stationary" // "allPhase"
filterGenes = "noFilter", # can be "noFilter", "meanFilter", "maxFilter", "sdFilter"
threshold=NA, # the threshold value for "meanFilter", "maxFilter", "sdFilter"
roundData=TRUE,
sumTechnicalReplicates=TRUE,
deSeqSfChoice="p1Sf", # can be "regSf", "p1Sf"
normalizationMethodChoice= "noNorm", # can be "vst", "rlog", "log10", "noNorm"
test_for = "Na_mM_Levels")  # works only if normalizationMethodChoice == noNorm
# c("Mg_mM_Levels", "Na_mM_Levels", "growthPhase", "carbonSource")
"home/"
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
# Analayze Kegg Pathways DESeq + DAVID
## DeSeq Normalization Cleaned 03
# The aim of the code is to generate normalized data matrix.
# The work flow compses of four parts
# Pick up the samples
# pick up the rows
# calculate size factors
# do the normalization
###*****************************
# INITIAL COMMANDS TO RESET THE SYSTEM
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
###*****************************
###*****************************
# Set Working Directory
# One needs to arrange the correct pathway if this is not umut's computer ;)
if(as.vector(Sys.info()["effective_user"]=="umut"))
{setwd(paste0("/Users/umut/GitHub/ecoli_multiple_growth_conditions/",
"d_Mf_Pathway_Analyze/DeSeq_DAVID/"))} # mac computer
###*****************************
###*****************************
# Load Files
source("../c_code_change_wrt_variables_RNA&Protein/data_naming_functions.R")
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
dataName
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
objectName
dataName$objectName
objectName
objectName=dataName$objectName,collapse
objectName=dataName$objectName
objectName
paste(objectName,collapse = "_")
objectName%1
objectName$initial
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
mainData_internal$objectName
mainData_internal$objectName[[1]]
as.character(mainData_internal$objectName[[1]])
mainData_internal$objectName[[1]]=as.character(mainData_internal$objectName[[1]])
mainData_internal$objectName[[1]]
length(mainData_internal$objectName)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
dataName$objectName
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
q<-read.table(file=paste0("../c_results/david_results/",objectName))
paste0("../c_results/david_results/",objectName)
objectName
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
objectName
q<-read.table(file=paste0("../c_results/david_results/",objectName,".txt"))
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
q<-mainData_internal$objectName
q
q$pick_data
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
q<-read.table(file=paste0("../c_results/david_results/",objectName,".txt"))
objectName
q<-read.table(file=paste0("../c_results/david_results/",objectName,".txt"))
q<-read.table(file=paste0("../c_results/david_results/",objectName,"_kegg.txt"))
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
initialValue
initialValue
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
objectName=paste(dataName$objectName,collapse = "_")
objectName
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization.R', echo=TRUE)
mainData
mainData[[1]]
mainData[[2]]
q<-mainData[[2]]
View(q)
objectName
fileName
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization.R', echo=TRUE)
mainData_internal$objectName
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization.R', echo=TRUE)
fileName
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
q<-read.table(file=paste0("../c_results/david_results/",objectName,"_kegg.txt"),fill = TRUE)
View(q)
q<-read.table(file=paste0("../c_results/david_results/",objectName,"_kegg.txt"),fill = TRUE, sep = "\t")
q<-read.table(file=paste0("../c_results/david_results/",objectName,"_kegg.txt"),sep = "\t",)
q<-read.table(file=paste0("../c_results/david_results/",objectName,"_kegg.txt"),sep = "\t")
View(q)
q<-read.table(file=paste0("../c_results/david_results/",objectName,"_kegg.txt"),sep = "\t",header = TRUE)
kegg_table<-read.table(file=paste0("../c_results/david_results/",objectName,"_kegg.txt"),
sep = "\t",header = TRUE)
View(kegg_table)
grep("eco",as.vector(kegg_table$Term))
kegg_table<-kegg_table[,grep("eco",as.vector(kegg_table$Term))]
kegg_table<-kegg_table[grep("eco",as.vector(kegg_table$Term)),]
View(kegg_table)
{setwd(paste0("/Users/umut/GitHub/ecoli_multiple_growth_conditions/c_results/DeSeq2_diffGene_Results/"))} # mac computer
list<-ls()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
list<-ls()
ls()
dir()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("stringr")
require("stringr")
source('~/GitHub/ecoli_multiple_growth_conditions/c_results/DeSeq2_diffGene_Results/test.R', echo=TRUE)
list(counter01)
source('~/GitHub/ecoli_multiple_growth_conditions/c_results/DeSeq2_diffGene_Results/test.R', echo=TRUE)
stringr::str_replace(string = "abc",pattern = "b",replacement = "bb")
list(counter01)
list[1]
list[60]
source('~/GitHub/ecoli_multiple_growth_conditions/c_results/DeSeq2_diffGene_Results/test.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_results/DeSeq2_diffGene_Results/test.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_results/DeSeq2_diffGene_Results/test.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
objectName
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
objectName
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/DESeq_David_kegg.R', echo=TRUE)
View(kegg_input)
View(kegg_table)
View(kegg_input)
View(kegg_table)
View(kegg_input)
View(kegg_table)
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt")
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt",sep = "\t")
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt",sep = "\n")
View(q)
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt",sep = " ")
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt",sep = " ")
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt",sep = "\t")
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt",sep = "\t",header = T)
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt",sep = "\t",header = T,fill = TRUE)
View(q)
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/c2.cp.kegg.v5.1.symbols.gmt",sep = "\t",header = F,fill = TRUE)
View(q)
q<-read.table("../d_Mf_Pathway_Analyze/ReferenceFiles/reOrganizedKegg.txt",sep = "\t",header = F,fill = TRUE)
View(q)
View(kegg_table)
View(q)
q$V1
grep(pattern = "flag",x = as.vector(q$v1))
grep(pattern = "flag*.*",x = as.vector(q$v1))
grep(pattern = "flag*.*",x = as.vector(q$v1),ignore.case = TRUE)
View(kegg_input)
View(kegg_table)
grep(pattern = "abc*.*",x = as.vector(q$v1),ignore.case = TRUE)
grep(pattern = "*abc*.*",x = as.vector(q$v1),ignore.case = TRUE)
View(q)
grep(pattern = "*alpha*.*",x = as.vector(q$v1),ignore.case = TRUE)
grep(pattern = "*.alpha*.*",x = as.vector(q$v1),ignore.case = TRUE)
grep(pattern = "*.*alpha*.*",x = as.vector(q$v1),ignore.case = TRUE)
grep(pattern = "*.*ALPHA*.*",x = as.vector(q$v1),ignore.case = TRUE)
grep(pattern = "KEGG*.*",x = as.vector(q$v1),ignore.case = TRUE)
grep(pattern = "KEGG*.*",x = as.vector(q$V1),ignore.case = TRUE)
grep(pattern = "kegg*.*",x = as.vector(q$V1),ignore.case = TRUE)
grep(pattern = "alpha*.*",x = as.vector(q$V1),ignore.case = TRUE)
grep(pattern = "*alpha*.*",x = as.vector(q$V1),ignore.case = TRUE)
grep(pattern = "*flac*.*",x = as.vector(q$V1),ignore.case = TRUE)
grep(pattern = "*flac*.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
View(kegg_table)
grep(pattern = "*abc*.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = "abc*.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = "abc.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = ".abc.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = "*.abc.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = "*.pent.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = "*.phen.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = "*.nit.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = "*.nit.*",x = as.vector(q$V1),ignore.case = TRUE)
q[,grep(pattern = "*.nit.*",x = as.vector(q$V1),ignore.case = TRUE)]
t(q[,grep(pattern = "*.nit.*",x = as.vector(q$V1),ignore.case = TRUE)])
t(q[grep(pattern = "*.nit.*",x = as.vector(q$V1),ignore.case = TRUE)],)
t(q[grep(pattern = "*.nit.*",x = as.vector(q$V1),ignore.case = TRUE)])
q[1,]
q[2,]
q[3,]
t(q[3,])
t(q[58,])
t(q[70,])
grep(pattern = "*.nit.*",x = as.vector(q$V1),ignore.case = TRUE,value = TRUE)
grep(pattern = "*.nit.*",x = as.vector(q$V1),ignore.case = TRUE)
t(q[64,])
