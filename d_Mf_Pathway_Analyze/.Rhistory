intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(dataOutput=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput[[2]][1]+dataOutput[[2]][2]*dataOutput[[1]]$hpi
GFP=dataOutput[[2]][3]+dataOutput[[2]][4]*dataOutput[[1]]$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = unnormalizeData(dataInput2)
dataOutput2
p<-list(a=1,b=2)
p
names(p)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = list(timeIntensityData=(data.frame(hpi,GFP)))
dataInput$timeIntensityData$GFP
is.data.frame(dataInput$timeIntensityData)
data_next_check=dataInput$timeIntensityData
"hpi" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFL" %in% names(data_next_check)
is.numeric(data_next_check$hpi)
is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP)
dataCheck <-function(data){
isalist=is.list(data)
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
is.list(dataInput)
is.data.frame(dataInput)
list(data=dataInput,b=3)
p<-list(data=dataInput,b=3)
is.list(p)
is.data.frame(p)
dataCheck <-function(data){
isalist=(is.list(data) & !is.data.frame(data))
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
View(data_next_check)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput$dataScalingParameters$timeMin+
dataOutput$dataScalingParameters$timeRatio*dataOutput$timeIntensityData$hpi
GFP=dataOutput$dataScalingParameters$intensityMin+
dataOutput$dataScalingParameters$intensityRatio*dataOutput$timeIntensityData$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = dataCheck(dataInput2)
dataOutput2
sd(c(3,5))
170*105/151
require("sicegar")
detach(sicegar)
detach("sicegar")
load("~/GitHub/single_cell_virology/processedData/SCV045_filter00_combinedResults.Rda")
View(all_fPc_SCV045_filter00)
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
t(all_fPc_SCV045_filter00[7,])
t(all_fPc_SCV045_filter00[12,])
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureRNA.R', echo=TRUE)
oldLevels
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureRNA.R', echo=TRUE)
listColors
condition
conditionSummaryTidy$condition
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureRNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureRNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureRNA.R', echo=TRUE)
fig02a<-ggplot(conditionSummaryTidy, aes( y=columnName,x= factor(orderNoCurrent)))+
geom_tile(aes(fill=condition), color="black")+
#geom_text(aes(label=orderNo,angle = 90))+
scale_fill_manual(values = listColors, breaks=oldLevels, labels=newLevels)+
scale_y_discrete(expand = c(0,0),
labels = rev(c("Growth phase","Na levels","Mg levels","Carbon source"))) +
scale_x_discrete(labels=as.vector(conditionSummary$dataSet),expand = c(0,0))+
guides(fill = guide_legend(title="Condition",override.aes = list(colour = NULL),
nrow=2,byrow = TRUE))+
theme(axis.text.x = element_text(angle = 90, hjust = -1, size = 6),
axis.text.y = element_text(size=14, face = "bold"),
legend.title=element_text(size=18),
legend.text=element_text(size=18),
axis.title=element_blank(),
axis.line = element_blank(),
axis.ticks.y=element_blank(),
legend.position="bottom",
legend.key.size= unit(.6,"cm"))
print(fig02a)
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureRNA.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureProtein.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureProtein.R', echo=TRUE)
newLevels
newLevels
oldLevels
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","late_stationary",
"baseNa","highNa",
"lowMg", "baseMg", "highMg",
"glucose", "glycerol", "lactate", "gluconate"),
c("Exponential","Stationary","Late-Stationary",
"Base Na", "High Na",
"Low Mg", "Base Mg", "High Mg",
"Glucose", "Glycerol", "Lactate", "Gluconate"))
newLevels
oldLevels<-levels(conditionSummaryTidy$condition)
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","late_stationary"),
c("Exponential","Stationary","Late-Stationary"))
newLevels
newLevels=replace(oldLevels,
oldLevels == c("exponential"),
c("Exponential"))
newLevels
oldLevels<-levels(conditionSummaryTidy$condition)
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","late_stationary"),
c("Exponential","Stationary","Late-Stationary"))
oldLevels<-levels(conditionSummaryTidy$condition)
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","late_stationary"),
c("Exponential","Stationary","Late-Stationary"))
newLevels
oldLevels<-levels(conditionSummaryTidy$condition)
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary"),
c("Exponential","Stationary"))
newLevels
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","late_stationary"),
c("Exponential","Stationary","Late-Stationary"))
newLevels
oldLevels<-levels(conditionSummaryTidy$condition)
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","late_stationary"),
c("Exponential","Stationary","Late-Stationary"))
newLevels
oldLevels
oldLevels<-levels(conditionSummaryTidy$condition)
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","late_stationary"),
c("Exponential","Stationary","Late_Stationary"))
newLevels
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","late_stationary"),
c("Exponential","Stationary","a"))
newLevels
oldLevels<-levels(conditionSummaryTidy$condition)
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary","glucose"),
c("Exponential","Stationary","Glucose"))
newLevels
oldLevels<-levels(conditionSummaryTidy$condition)
newLevels=replace(oldLevels,
oldLevels == c("exponential","stationary"),
c("Exponential","Stationary"))
newLevels
oldLevels == c("exponential","stationary")
oldLevels == c("exponential","stationary","glucose")
oldLevels == c("exponential","stationary","glucose")
oldLevels == c("exponential","stationary")
oldLevels == c("exponential","stationary","a")
oldLevels
which(x = oldLevels,arr.ind = baseNa)
which(x = oldLevels,arr.ind = "baseNa")
?replace
?find
oldLevels<-as.vector(levels(conditionSummaryTidy$condition))
oldLevels == c("exponential","stationary","glucose")
oldLevels == c("glucose","exponential","stationary")
oldLevel=="glucose"
oldLevels=="glucose"
which(oldLevels=="glucose")
oldLevel(which(oldLevels=="glucose"))
q1=c("a","b","a","b","b")
replace(x = q1, list = c("a","b"),values = c("b","a"))
replace(x = q1, list = c("a","b"),values = c("b","a"))
base::replace(x = q1, list = c("a","b"),values = c("b","a"))
?replace
grep(pattern = "a",x = q1)
grep(pattern = "a|b",x = q1)
q1=c("a","b","a","b","b")
q1
sample(1000000:9999999,1,replace=T)
sprintf("filter%02d", filterNo)
sprintf("filter%02d", 5)
replace_fun<-function(input_vector,initialVal, finalVal)
{
if(length(initialVal)!=length(finalVal))
{stop("length initial val should be equal to final val")}
if(length(initialVal)!=length(unique(initialVal)))
{stop("there should not be any repeats in initialVal")}
midStepVar=sprintf("random%07",sample(1000000:9999999,length(initialVal),replace=T))
for(counter01 in 1:length(initialVal))
{
positionsToReplace=grep(pattern = initialVal[counter01],x = input_vector)
input_vector[positionsToReplace]<-midStepVar[counter01]
}
for(counter01 in 1:length(initialVal))
{
positionsToReplace=grep(pattern = midStepVar[counter01],x = input_vector)
input_vector[positionsToReplace]<-finalVal[counter01]
}
return(input_vector)
}
replace_fun(input_vector = q1,initialVal = "a",finalVal = "b")
sprintf("random%07",3)
sprintf("random%02",3)
sprintf("filter%02d", filterNo)
sprintf("filter%02d", 5)
sprintf("random%07d",sample(1000000:9999999,length(initialVal),replace=T))
sprintf("filter%07d", 5)
sprintf("random%07d", 5)
sprintf("random%07d", sample(1000000:9999999,length(initialVal),replace=T))
sample(1000000:9999999,length(initialVal),replace=T)
sample(1000000:9999999,length(4),replace=T)
sample(1000000:9999999,4,replace=T)
sample(1000000:9999999,4,replace=T)
sprintf("random%07d", sample(1000000:9999999,4,replace=T))
replace_fun<-function(input_vector,initialVal, finalVal)
{
if(length(initialVal)!=length(finalVal))
{stop("length initial val should be equal to final val")}
if(length(initialVal)!=length(unique(initialVal)))
{stop("there should not be any repeats in initialVal")}
midStepVar=sprintf("random%07d", sample(1000000:9999999,length(initialVal),replace=T))
for(counter01 in 1:length(initialVal))
{
positionsToReplace=grep(pattern = initialVal[counter01],x = input_vector)
input_vector[positionsToReplace]<-midStepVar[counter01]
}
for(counter01 in 1:length(initialVal))
{
positionsToReplace=grep(pattern = midStepVar[counter01],x = input_vector)
input_vector[positionsToReplace]<-finalVal[counter01]
}
return(input_vector)
}
replace_fun(input_vector = q1,initialVal = "a",finalVal = "b")
replace_fun(input_vector = q1,initialVal = c("a","b"),finalVal = c("b","a"))
replace_fun<-function(input_vector,initialVal, finalVal)
{
if(length(initialVal)!=length(finalVal))
{stop("length initial val should be equal to final val")}
if(length(initialVal)!=length(unique(initialVal)))
{stop("there should not be any repeats in initialVal")}
midStepVar=paste0("midStep",initialVal)
for(counter01 in 1:length(initialVal))
{
positionsToReplace=grep(pattern = initialVal[counter01],x = input_vector)
input_vector[positionsToReplace]<-midStepVar[counter01]
}
for(counter01 in 1:length(initialVal))
{
positionsToReplace=grep(pattern = midStepVar[counter01],x = input_vector)
input_vector[positionsToReplace]<-finalVal[counter01]
}
return(input_vector)
}
replace_fun(input_vector = q1,initialVal = c("a","b"),finalVal = c("b","a"))
replace_fun(input_vector = q1,initialVal = c("a","c"),finalVal = c("b","a"))
replace_fun(input_vector = q1,initialVal = c("a","c"),finalVal = c("d","a"))
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureProtein.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/b_code_histogram_RNA&Protein/heatMapFigureProtein.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/difExpGene_Figures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
fig03
fig01
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/difExpGene_Figures.R', echo=TRUE)
figBarGraph01
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/difExpGene_Figures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/difExpGene_Figures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/difExpGene_Figures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
oldLevels=levels(kegg_metabolism_summary$grouping)
oldLevels
scale_x_discrete(labels=newLevels)+
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
mainLoadedFile_kegg$KEGG_Path_short %in% kegg_vector
intersect(mainLoadedFile_kegg$KEGG_Path_short , kegg_vector)
intersect(mainLoadedFile_kegg$KEGG_Path_short , kegg_vector)
kegg_vector
q<-intersect(mainLoadedFile_kegg$KEGG_Path_short , kegg_vector)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/MetabolismFigures.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
fig02b
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
kegg_flagellar_assembly_df$padj_gene
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
min(kegg_flagellar_assembly_df$padj_gene)
ggplot(kegg_flagellar_assembly_df, aes( x=log2,y=grouping)) +
geom_point(aes(colour = padj_gene),size=2.5)+
geom_vline(xintercept = c(log2(1/2),log2(2)), colour="orange", linetype = "longdash")+
geom_vline(xintercept = c(log2(1)), colour="black", linetype = "longdash")+
geom_text_repel(aes(label=ID),size=5, colour="Black", fontface="bold")
ggplot(kegg_flagellar_assembly_df, aes( x=log2,y=grouping)) +
geom_point(aes(colour = padj_gene),size=2.5)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
log(0.0000000000000000000001)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/d_Mf_Pathway_Analyze/Flaggellar_figure.R', echo=TRUE)
