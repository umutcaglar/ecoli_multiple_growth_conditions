intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(dataOutput=dataOutput,
dataScalingParameters=c(timeMin,timeRatio,intensityMin,intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
p<-c(1,2,3)
p
p<-c(a=1,b=2,c=3)
p
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(dataOutput=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput[[2]][1]+dataOutput[[2]][2]*dataOutput[[1]]$hpi
GFP=dataOutput[[2]][3]+dataOutput[[2]][4]*dataOutput[[1]]$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = unnormalizeData(dataInput2)
dataOutput2
p<-list(a=1,b=2)
p
names(p)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = list(timeIntensityData=(data.frame(hpi,GFP)))
dataInput$timeIntensityData$GFP
is.data.frame(dataInput$timeIntensityData)
data_next_check=dataInput$timeIntensityData
"hpi" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFL" %in% names(data_next_check)
is.numeric(data_next_check$hpi)
is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP)
dataCheck <-function(data){
isalist=is.list(data)
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
is.list(dataInput)
is.data.frame(dataInput)
list(data=dataInput,b=3)
p<-list(data=dataInput,b=3)
is.list(p)
is.data.frame(p)
dataCheck <-function(data){
isalist=(is.list(data) & !is.data.frame(data))
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
View(data_next_check)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput$dataScalingParameters$timeMin+
dataOutput$dataScalingParameters$timeRatio*dataOutput$timeIntensityData$hpi
GFP=dataOutput$dataScalingParameters$intensityMin+
dataOutput$dataScalingParameters$intensityRatio*dataOutput$timeIntensityData$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = dataCheck(dataInput2)
dataOutput2
save(file =paste0("../c_results/david_results/",fileName,".rData"),list = fileName)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
View(davidOutput)
View(RNASta_Na_comp)
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
load("/Users/umut/GitHub/ecoli_multiple_growth_conditions/c_results/david_results/RNASta_Na_comp.rData")
View(RNASta_Na_comp)
View(RNASta_Na_comp)
View(RNASta_Na_comp)
davidOutput %>%
dplyr:filter(FDR<0.05)->davidOutput
# Play with results of DAVID Gene Ontology Results
###*****************************
# INITIAL COMMANDS TO RESET THE SYSTEM
rm(list = ls())
if (is.integer(dev.list())){dev.off()}
cat("\014")
# Set Working Directory
setwd('/Users/umut/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/') # mac computer
###*****************************
###*****************************
# DOWNLOAD LIBRARIES
library("Biobase")
library("DESeq2")
library("dplyr")
library("ggplot2")
require('gridExtra')
require("cowplot")
###*****************************
###*****************************
# LOAD DATA
dataTypeChoice="mrna"
dataTimeChoice="stationary"
setNameChoice="Na"
if(dataTypeChoice=="mrna") {dataType="RNA"}
if(dataTypeChoice=="protein") {dataType="Protein"}
if(dataTimeChoice=="exponential") {dataTime="Exp"}
if(dataTimeChoice=="stationary") {dataTime="Sta"}
if(setNameChoice=="Mg") {setName="Mg"}
if(setNameChoice=="Na") {setName="Na"}
if(setNameChoice=="carbonSource") {setName="Ca"}
fileName=paste0(dataType,dataTime,"_",setName ,"_comp")
davidOutput<-read.table(file = paste0("../c_results/david_results/",fileName,".txt"),
fill = TRUE,
sep = "\t",
header = TRUE)
davidOutput=as.data.frame(davidOutput)
davidOutput %>%
dplyr:filter(FDR<0.05)->davidOutput
davidOutput %>%
dplyr::filter(FDR<0.05)->davidOutput
View(davidOutput)
View(davidOutput)
davidOutput %>%
dplyr::filter(FDR<0.05) %>%
dplyr::group_by("Term")->davidOutput
davidOutput %>%
dplyr::filter(FDR<0.05) %>%
dplyr::group_by("Term") %>%
dplyr::slice(which.max("FDR"))->davidOutputFiltered
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
davidOutput %>%
dplyr::group_by()%>%
dplyr::filter(FDR<0.05) %>%
dplyr::group_by("Term")
davidOutput %>%
dplyr::group_by()%>%
dplyr::filter(FDR<0.05) %>%
dplyr::group_by("Term") %>%
dplyr::slice(which.max("FDR"))
davidOutput %>%
dplyr::group_by()%>%
dplyr::filter(FDR<0.05) %>%
dplyr::group_by("Term") %>%
dplyr::slice(which.max(FDR))->davidOutputFiltered
View(davidOutputFiltered)
davidOutput %>%
dplyr::group_by()%>%
dplyr::filter(FDR<0.05) %>%
dplyr::group_by(Term) %>%
dplyr::slice(which.max(FDR))->davidOutputFiltered
View(davidOutputFiltered)
davidOutput %>%
dplyr::group_by()%>%
dplyr::filter(FDR<0.05) %>%
dplyr::group_by(Term) %>%
dplyr::slice(which.max(FDR)) %>%
dplyr::group_by() %>%
dplyr::arrange(FDR)->davidOutputFiltered
View(davidOutputFiltered)
davidOutput$Term
greb("ecd*",davidOutput$Term)
grep("ecd*",davidOutput$Term)
grepl("ecd*",davidOutput$Term)
grepl("^ecd*",davidOutput$Term)
grepl("^ecd*.*",davidOutput$Term)
grepl("^ecd.*",davidOutput$Term)
grep("^ecd.*",davidOutput$Term)
davidOutput$Term[grep("^ecd.*",davidOutput$Term)]
davidOutput$Term[grep("^ecd.*:",davidOutput$Term)]
davidOutput$Term[grep("^*:",davidOutput$Term)]
davidOutput$Term[grep("^*\:",davidOutput$Term)]
davidOutput$Term[grep("^*\\:",davidOutput$Term)]
davidOutput$Term[grep("^*.\\:",davidOutput$Term)]
davidOutput$Term[grep("^*.*\\:",davidOutput$Term)]
davidOutput$Term[grep("^*.\\:",davidOutput$Term)]
davidOutput$Term[grep("^*:",davidOutput$Term)]
davidOutput$Term[grep(":",davidOutput$Term)]
davidOutput$Term[gsub("*.:",davidOutput$Term)]
davidOutput$Term[gsub("*.:","",davidOutput$Term)]
davidOutput$Term[regexpr("*.:",davidOutput$Term)]
davidOutput$Term[regexpr("*.\\:",davidOutput$Term)]
davidOutput$Term[regexpr(":*",davidOutput$Term)]
davidOutput$Term[regexpr("\\:*",davidOutput$Term)]
davidOutput$Term[regexpr("\\:*",davidOutput$Term[1])]
davidOutput$Term[regexpr("\\:.*",davidOutput$Term[1])]
require("tidyr")
View(davidOutput)
davidOutput %>% tidyr::separate(col = Term,into = c("pathway.Number","pathway.Name"),sep = "\\:")->q
View(q)
davidOutput %>%
tidyr::separate(col = Term,into = c("pathway.Number","pathway.Name"),sep = "\\:")->davidOutput
length(unique(davidOutput$pathway.Name))
grepl("ecd",pathway.Number)
grepl("ecd",davidOutput$pathway.Number)
davidOutput %>%
dplyr::filter(grepl("ecd",pathway.Number))->davidOutput
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
numDifferentPathways
View(davidOutputFiltered)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
differentPathways
View(davidOutput)
View(davidOutputFiltered)
View(davidOutput)
davidOutput %>%
dplyr::filter(grepl("ecd",pathway.Number))->davidOutputFiltered1
davidOutput %>%
dplyr::filter(grepl("eco",pathway.Number))->davidOutputFiltered2
View(davidOutputFiltered2)
View(davidOutputFiltered1)
unique(x = c(davidOutputFiltered1$pathway.Name,davidOutputFiltered2$pathway.Name)
)
unique(x = c(davidOutputFiltered1$pathway.Name,davidOutputFiltered2$pathway.Name))
differentPathways
sort(differentPathways)
View(davidOutput)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
View(davidOutput)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
View(davidOutput)
davidOutput<-read.table(file = paste0("../c_results/david_results/","test",".txt"),
fill = TRUE,
sep = "\t",
header = TRUE)
#****************************
davidOutput=as.data.frame(davidOutput)
davidOutput %>%
tidyr::separate(col = Term,into = c("pathway.Number","pathway.Name"),sep = "\\:") %>%
dplyr::mutate(FDR2=p.adjust(PValue, method = "fdr"))->davidOutput
View(davidOutput)
davidOutput<-read.table(file = paste0("../c_results/david_results/","test",".txt"),
fill = TRUE,
sep = "\t",
header = TRUE)
davidOutput=as.data.frame(davidOutput)
davidOutput %>%
tidyr::separate(col = Term,into = c("pathway.Number","pathway.Name"),sep = "\\:") %>%
dplyr::mutate(FDR2=p.adjust(PValue, method = "fdr"))->davidOutput
View(davidOutput)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
View(davidOutputFiltered)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
View(davidOutputFiltered)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
View(davidOutputFiltered)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
View(RNASta_Ca_comp)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
`colnames(davidOutput)
`
colnames(davidOutput)
colnames(davidOutput)=="X."
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
write.csv(file =paste0("../c_results/david_results/",fileName,"_filtered2.csv"),
x = davidOutputFiltered, quote = TRUE, row.names = FALSE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
View(ProteinExp_Ca_comp)
View(ProteinExp_Ca_comp)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/davidResultAnalysis.R', echo=TRUE)
