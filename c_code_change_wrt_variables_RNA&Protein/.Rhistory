timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput[[2]][1]+dataOutput[[2]][2]*dataOutput[[1]]$hpi
GFP=dataOutput[[2]][3]+dataOutput[[2]][4]*dataOutput[[1]]$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
# add usage examples here
# generateRandomData
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = unnormalizeData(dataInput2)
dataOutput2
p<-list(a=1,b=2)
p
names(p)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = list(timeIntensityData=(data.frame(hpi,GFP)))
dataInput$timeIntensityData$GFP
is.data.frame(dataInput$timeIntensityData)
data_next_check=dataInput$timeIntensityData
"hpi" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check)
"hpi" %in% names(data_next_check) & "GFL" %in% names(data_next_check)
is.numeric(data_next_check$hpi)
is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP)
dataCheck <-function(data){
isalist=is.list(data)
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
is.list(dataInput)
is.data.frame(dataInput)
list(data=dataInput,b=3)
p<-list(data=dataInput,b=3)
is.list(p)
is.data.frame(p)
dataCheck <-function(data){
isalist=(is.list(data) & !is.data.frame(data))
if(isalist){
doesitcontainTID=("timeIntensityData" %in% names(data))
if(doesitcontainTID){
issection_dataframe=is.data.frame(data$timeIntensityData)
if(issection_dataframe){
data_next_check=data$timeIntensityData
}
if(!issection_dataframe){
stop("the timeIntensityData section should be a data frame")
}
}
if(!doesitcontainTID){
stop("the list should contain timeIntensityData section")
}
}
if(!isalist){
isadataframe=is.data.frame(data)
if(isadataframe){
data_next_check=data
data2=data
data=list(timeIntensityData=data2)
}
if(!isadataframe){
stop("It should either be a list or a data frame")
}
}
num_columns=ncol(data_next_check)
if(num_columns==2){
doescolnamescorrect=("hpi" %in% names(data_next_check) & "GFP" %in% names(data_next_check))
if(doescolnamescorrect){
arecolumnsnumeric=(is.numeric(data_next_check$hpi) & is.numeric(data_next_check$GFP))
if(arecolumnsnumeric){
print("check done")
return(data)
}
if(!arecolumnsnumeric){
stop("The columns should include numbers")
}
}
if(!doescolnamescorrect){
stop("The colum names should be hpi and GFP")
}
}
if(!num_columns==2){
stop("The data frame should contain 2 columns")
}
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = dataCheck(dataInput)
View(data_next_check)
dataOutput
unnormalizeData <-
function(dataInput)
{
hpi=dataOutput$dataScalingParameters$timeMin+
dataOutput$dataScalingParameters$timeRatio*dataOutput$timeIntensityData$hpi
GFP=dataOutput$dataScalingParameters$intensityMin+
dataOutput$dataScalingParameters$intensityRatio*dataOutput$timeIntensityData$GFP
dataOutput = list(timeIntensityData=data.frame(hpi,GFP))
return(dataOutput)
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
normalizeData <-
function(dataInput)
{
timeMin=min(dataInput$hpi)
timeData=dataInput$hpi-timeMin
timeRatio=max(timeData)
timeData=timeData/timeRatio
intensityMin=min(dataInput$GFP)
intensityData=dataInput$GFP-intensityMin
intensityRatio=max(intensityData)
intensityData=intensityData/intensityRatio
dataOutput = data.frame(hpi=timeData,GFP=intensityData)
return(list(timeIntensityData=dataOutput,
dataScalingParameters=c(timeMin=timeMin,
timeRatio=timeRatio,
intensityMin=intensityMin,
intensityRatio=intensityRatio)))
}
hpi = seq(3,48,0.5)
GFP=runif(length(hpi), 3.0, 7.5)
dataInput = data.frame(hpi,GFP)
dataOutput = normalizeData(dataInput)
dataInput2=dataOutput
dataOutput2 = dataCheck(dataInput2)
dataOutput2
sd(c(3,5))
170*105/151
require("sicegar")
detach(sicegar)
detach("sicegar")
load("~/GitHub/single_cell_virology/processedData/SCV045_filter00_combinedResults.Rda")
View(all_fPc_SCV045_filter00)
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
all_fPc_SCV045_filter00[7,]
t(all_fPc_SCV045_filter00[7,])
t(all_fPc_SCV045_filter00[12,])
rep(1:4, 2)
rep("a", 2)
rep(c("a","b"), 2)
rep(c("a","b"), 2,4)
rep(c("a","b"), c(2,4))
rep(c("a","b","c"), c(2,4,6))
FDR?
?
`
""
ELKFWE
QUIR
S
msdnbf
)))
install.packages("ada", "caret", "e1071", "ggplot2", "GGally", "glmnet", "MASS", "randomForest", "reshape2", "sparsediscrim")
install.packages("ada")
install.packages("caret")
install.packages("e1071")
install.packages("ggplot2")
install.packages("GGally")
install.packages("glmnet")
install.packages("MASS")
install.packages("randomForest")
install.packages("reshape2")
install.packages("sparsediscrim")
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
??foreach
install.packages("doMC")
install.packages("foreach")
??foreach
require(doMC)
require(foreach)
??foreach
?foreach
source('~/Desktop/statTest.R', echo=TRUE)
mean(trueSet)
mean(wrongSet)
length(trueSet)
length(wrongSet)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/Desktop/statTest.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
res
paste0("_batchNumber+",test_for)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
vs
View(res_df_filtered)
res
res[1]
res$padj
DESeq2::summary.DESeqResults(object = res,alpha = 0.05)
?results
DESeq2::summary.DESeqResults(object = res,alpha = 0.05)
View(res_df_filtered)
DESeq2::summary.DESeqResults(object = res,alpha = 0.05, contrast=c(test_for,test_contrast,test_base))
DESeq2::summary.DESeqResults(object = res,alpha = 0.05, contrast=c(test_for,test_contrast,test_base), pAdjustMethod="fdr")
View(res_df)
colnames(res_df)
res_df %>%
dplyr::filter(pvalue<0.05, abs(log2FoldChange)>1)%>%
dplyr::arrange(padj)->res_df_filtered
res_df %>% dplyr::mutate(padj2=padjust(pvalue))
res_df %>% dplyr::mutate(padj2=p.adjust(p = pvalue,method = "fdr"))->red_df
View(red_df)
remove(red_df)
res_df %>% dplyr::mutate(padj2=p.adjust(p = pvalue,method = "fdr"))->res_df
res_df %>%
dplyr::filter(padj2<0.05, abs(log2FoldChange)>1)%>%
dplyr::arrange(padj)->res_df_filtered
res_df %>%
dplyr::filter(padj<0.05, abs(log2FoldChange)>1)%>%
dplyr::arrange(padj)->res_df_filtered
View(res_df)
?p.adjust
View(res_df_filtered)
assey(deseq_DataObj)->q
assay(deseq_DataObj)->q
as.data.frame(assay(deseq_DataObj))->q
View(res_df)
res
res <- DESeq2::results(object = differentialGeneAnalResults,
pAdjustMethod ="fdr",
contrast = c(test_for,test_contrast,test_base),
independentFiltering = FALSE)
DESeq2::summary.DESeqResults(object = res,alpha = 0.05)
res
res <- DESeq2::results(object = differentialGeneAnalResults,
pAdjustMethod ="fdr",
contrast = c(test_for,test_contrast,test_base),
independentFiltering = FALSE,
cooksCutoff = FALSE)
res
mcols(res, use.names=TRUE)
DESeq2::summary.DESeqResults(object = res,alpha = 0.05)
res_df<-as.data.frame(res)
res_df %>%
dplyr::filter(padj<0.05, abs(log2FoldChange)>1)%>%
dplyr::arrange(padj)->res_df_filtered
res_df %>%
dplyr::filter(padj<0.06, abs(log2FoldChange)>1)%>%
dplyr::arrange(padj)->res_df_filtered
res_df %>%
dplyr::filter(padj<0.05, abs(log2FoldChange)>1)%>%
dplyr::arrange(padj)->res_df_filtered
res_df %>%
dplyr::filter(padj<0.05)%>%
dplyr::arrange(padj)->res_df_filtered
DESeq2::summary.DESeqResults(object = res,alpha = 0.05)
res_df<-as.data.frame(res)
res_df %>% dplyr::mutate(padj2=p.adjust(p = pvalue,method = "fdr"))->res_df
View(res_df)
DESeq2::summary.DESeqResults(object = res,alpha = 0.05)
ames(res_df)
names(res_df)
saveFiles=TRUE
runDeSeqForDifExp=TRUE
# The data filtering function that controls sub functions.
mainData=filter_data(dataType = "mrna", # can be "rna", "mrna", "protein", "protein_wo_NA"
badDataSet = "set00", # can be "set00",set01","set02", "set03"
# referenceParameters can be a vector like
# c("growthPhase", "Mg_mM_Levels", "Na_mM_Levels", "carbonSource", "experiment")
referenceParameters=c("growthPhase",
"Mg_mM_Levels",
"Na_mM_Levels",
"carbonSource",
"experiment"),
# referenceLevels can be a vector like
# c("exponential", "baseMg", "baseNa", "glucose", "glucose_time_course")
referenceLevels=c("exponential",
"baseMg",
"baseNa",
"glucose",
"glucose_time_course"),
experimentVector = c("allEx"),
# can be "Stc","Ytc","Nas","Agr","Ngr","Mgl","Mgh" // "allEx"
carbonSourceVector = "SYAN", # can be any sub combination of "SYAN"
MgLevelVector = c("allMg"), # can be "lowMg","baseMg","highMg" // "allMg"
NaLevelVector = c("allNa"), # can be "baseNa","highNa" // "allNa"
# can be "exponential","stationary","late_stationary" // "allPhase"
growthPhaseVector = c("allPhase"),
filterGenes = "noFilter", # can be "noFilter", "meanFilter", "maxFilter", "sdFilter"
threshold=NA, # the threshold value for "meanFilter", "maxFilter", "sdFilter"
roundData=TRUE,
sumTechnicalReplicates=TRUE,
deSeqSfChoice= "noSf", # can be "regSf", "p1Sf", "noSf"
normalizationMethodChoice= "noNorm") # can be "vst", "rlog", "log10", "noNorm"
###*****************************
###*****************************
#Decompose the container
deseq_DataObj=mainData[[1]]
objectName=mainData[[2]]
###*****************************
###*****************************
# Do the DeSeq2 test
# c("Mg_mM_Levels", "Na_mM_Levels", "growthPhase", "carbonSource")
test_for="Mg_mM_Levels"
DESeq2::design(deseq_DataObj)<- as.formula(paste0("~ ","batchNumber + ",test_for))
differentialGeneAnalResults<-DESeq2::DESeq(deseq_DataObj, quiet = TRUE)
res_Mg <- DESeq2::results(object = differentialGeneAnalResults,
pAdjustMethod ="fdr",
contrast = c(test_for,"highMg","baseMg"),
independentFiltering = FALSE,
cooksCutoff = FALSE)
res_Mg
###*****************************
res_Mg_a=res_Mg
###*****************************
saveFiles=TRUE
runDeSeqForDifExp=TRUE
# The data filtering function that controls sub functions.
mainData=filter_data(dataType = "mrna", # can be "rna", "mrna", "protein", "protein_wo_NA"
badDataSet = "set00", # can be "set00",set01","set02", "set03"
# referenceParameters can be a vector like
# c("growthPhase", "Mg_mM_Levels", "Na_mM_Levels", "carbonSource", "experiment")
referenceParameters=c("growthPhase",
"Mg_mM_Levels",
"Na_mM_Levels",
"carbonSource",
"experiment"),
# referenceLevels can be a vector like
# c("exponential", "baseMg", "baseNa", "glucose", "glucose_time_course")
referenceLevels=c("exponential",
"baseMg",
"baseNa",
"glucose",
"glucose_time_course"),
experimentVector = c("allEx"),
# can be "Stc","Ytc","Nas","Agr","Ngr","Mgl","Mgh" // "allEx"
carbonSourceVector = "SYAN", # can be any sub combination of "SYAN"
MgLevelVector = c("baseMg", "highMg"), # can be "lowMg","baseMg","highMg" // "allMg"
NaLevelVector = c("allNa"), # can be "baseNa","highNa" // "allNa"
# can be "exponential","stationary","late_stationary" // "allPhase"
growthPhaseVector = c("allPhase"),
filterGenes = "noFilter", # can be "noFilter", "meanFilter", "maxFilter", "sdFilter"
threshold=NA, # the threshold value for "meanFilter", "maxFilter", "sdFilter"
roundData=TRUE,
sumTechnicalReplicates=TRUE,
deSeqSfChoice= "noSf", # can be "regSf", "p1Sf", "noSf"
normalizationMethodChoice= "noNorm") # can be "vst", "rlog", "log10", "noNorm"
###*****************************
###*****************************
#Decompose the container
deseq_DataObj=mainData[[1]]
objectName=mainData[[2]]
###*****************************
###*****************************
# Do the DeSeq2 test
# c("Mg_mM_Levels", "Na_mM_Levels", "growthPhase", "carbonSource")
test_for="Mg_mM_Levels"
DESeq2::design(deseq_DataObj)<- as.formula(paste0("~ ","batchNumber + ",test_for))
differentialGeneAnalResults<-DESeq2::DESeq(deseq_DataObj, quiet = TRUE)
res_Mg_f <- DESeq2::results(object = differentialGeneAnalResults,
pAdjustMethod ="fdr",
contrast = c(test_for,"highMg","baseMg"),
independentFiltering = FALSE,
cooksCutoff = FALSE)
res_Mg_f
###*****************************
cat("\014")
res_Mg_a
res_Mg_f
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
vs
vs
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
View(genes_0.05)
View(genes_0.05)
view(genes_0.05)
View(genes_0.05)
genes_0.05
View(res_df)
metaData
View(metaData)
res_df
View(res_df)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
fileName
fileName
paste(objectName,collapse = "_")
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2.R', echo=TRUE)
list(a,b)
list("a","b")
list("a","b")->q
length(q)
k;sdkdkj dfn,sdnflength
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
differentCompartisonsList[1]
differentCompartisonsList[[1]]
RUN=differentCompartisonsList[[1]]
RUN
RUN$dataTypeChoice
RUN[dataTypeChoice]
RUN[["dataTypeChoice"]]
RUN
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
RUN[["dataTypeChoice"]]
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
dataTypeChoice
badDataSetChoice
RUN
RUN[["dataTypeChoice"]]
RUN$dataTypeChoice
RUN[1]
RUN[[1]]
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
dataTypeChoice
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
counter01
source('~/GitHub/ecoli_multiple_growth_conditions/c_code_change_wrt_variables_RNA&Protein/data_normalization_DeSeq2_multiple.R', echo=TRUE)
counter01
